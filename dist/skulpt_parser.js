"use strict";function _typeof(t){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_typeof(t)}function _createForOfIteratorHelper(t,s){var e="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!e){if(Array.isArray(t)||(e=_unsupportedIterableToArray(t))||s&&t&&"number"==typeof t.length){e&&(t=e);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var r,a=!0,i=!1;return{s:function(){e=e.call(t)},n:function(){var t=e.next();return a=t.done,t},e:function(t){i=!0,r=t},f:function(){try{a||null==e.return||e.return()}finally{if(i)throw r}}}}function _unsupportedIterableToArray(t,s){if(t){if("string"==typeof t)return _arrayLikeToArray(t,s);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?_arrayLikeToArray(t,s):void 0}}function _arrayLikeToArray(t,s){(null==s||s>t.length)&&(s=t.length);for(var e=0,n=new Array(s);e<s;e++)n[e]=t[e];return n}var SkAst={exportSymbol:function(t,s){var e,n=t.split("."),o=SkAst;for(e=1;e<n.length-1;e++)n[e]in o||(o[n[e]]={});o[n[e]]=s},configure:function(t){}};SkAst.builtin={SyntaxError:function(t,s,e,n){this.message=t,this.filename=s,this.lineno=e,this.position=n},str:function(t){return t instanceof SkAst.builtin.str?t:this instanceof SkAst.builtin.str?void(this.v=t):new SkAst.builtin.str(t)},int_:function(t){this.v=t},float_:function(t){this.v=t},bool:{true$:{v:!0},false$:{v:!0}},none:{none$:{v:null}}},SkAst.builtin.int_.threshold$=1/0,SkAst.builtin.str.prototype.sq$concat=function(t){return new SkAst.builtin.str(this.v+t.v)},SkAst.__future__={print_function:!0,division:!0,absolute_import:null,unicode_literals:!0,python3:!0,set_repr:!0,class_repr:!0,inherit_from_object:!0,super_args:!0,octal_number_literal:!0,bankers_rounding:!0,python_version:!0,dunder_next:!0,dunder_round:!0,list_clear:!0,exceptions:!0,no_long_type:!0,ceil_floor_int:!0,l_suffix:!1,silent_octal_literal:!1},SkAst.asserts={assert:function(t){t||console.error(t)}},SkAst.ffi={remapToJs:function(t){return t.v}},SkAst.astnodes={},SkAst.astnodes.Load=function(){},SkAst.astnodes.Store=function(){},SkAst.astnodes.Del=function(){},SkAst.astnodes.AugLoad=function(){},SkAst.astnodes.AugStore=function(){},SkAst.astnodes.Param=function(){},SkAst.astnodes.And=function(){},SkAst.astnodes.Or=function(){},SkAst.astnodes.Add=function(){},SkAst.astnodes.Sub=function(){},SkAst.astnodes.Mult=function(){},SkAst.astnodes.MatMult=function(){},SkAst.astnodes.Div=function(){},SkAst.astnodes.Mod=function(){},SkAst.astnodes.Pow=function(){},SkAst.astnodes.LShift=function(){},SkAst.astnodes.RShift=function(){},SkAst.astnodes.BitOr=function(){},SkAst.astnodes.BitXor=function(){},SkAst.astnodes.BitAnd=function(){},SkAst.astnodes.FloorDiv=function(){},SkAst.astnodes.Invert=function(){},SkAst.astnodes.Not=function(){},SkAst.astnodes.UAdd=function(){},SkAst.astnodes.USub=function(){},SkAst.astnodes.Eq=function(){},SkAst.astnodes.NotEq=function(){},SkAst.astnodes.Lt=function(){},SkAst.astnodes.LtE=function(){},SkAst.astnodes.Gt=function(){},SkAst.astnodes.GtE=function(){},SkAst.astnodes.Is=function(){},SkAst.astnodes.IsNot=function(){},SkAst.astnodes.In=function(){},SkAst.astnodes.NotIn=function(){},SkAst.astnodes.Module=function(t,s){return this.body=t,this.docstring=s,this},SkAst.astnodes.Interactive=function(t){return this.body=t,this},SkAst.astnodes.Expression=function(t){return this.body=t,this},SkAst.astnodes.Suite=function(t){return this.body=t,this},SkAst.astnodes.FunctionDef=function(t,s,e,n,o,r,a,i,l,u){return SkAst.asserts.assert(null!=a),SkAst.asserts.assert(null!=i),SkAst.asserts.assert(null!=l),SkAst.asserts.assert(null!=u),this.name=t,this.args=s,this.body=e,this.decorator_list=n,this.returns=o,this.docstring=r,this.lineno=a,this.col_offset=i,this.end_lineno=l,this.end_col_offset=u,this},SkAst.astnodes.AsyncFunctionDef=function(t,s,e,n,o,r,a,i,l,u){return SkAst.asserts.assert(null!=a),SkAst.asserts.assert(null!=i),SkAst.asserts.assert(null!=l),SkAst.asserts.assert(null!=u),this.name=t,this.args=s,this.body=e,this.decorator_list=n,this.returns=o,this.docstring=r,this.lineno=a,this.col_offset=i,this.end_lineno=l,this.end_col_offset=u,this},SkAst.astnodes.ClassDef=function(t,s,e,n,o,r,a,i,l,u){return SkAst.asserts.assert(null!=a),SkAst.asserts.assert(null!=i),SkAst.asserts.assert(null!=l),SkAst.asserts.assert(null!=u),this.name=t,this.bases=s,this.keywords=e,this.body=n,this.decorator_list=o,this.docstring=r,this.lineno=a,this.col_offset=i,this.end_lineno=l,this.end_col_offset=u,this},SkAst.astnodes.Return=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.value=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Delete=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.targets=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Assign=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.targets=t,this.value=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.AugAssign=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.target=t,this.op=s,this.value=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.AnnAssign=function(t,s,e,n,o,r,a,i){return SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),SkAst.asserts.assert(null!=i),this.target=t,this.annotation=s,this.value=e,this.simple=n,this.lineno=o,this.col_offset=r,this.end_lineno=a,this.end_col_offset=i,this},SkAst.astnodes.For=function(t,s,e,n,o,r,a,i){return SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),SkAst.asserts.assert(null!=i),this.target=t,this.iter=s,this.body=e,this.orelse=n,this.lineno=o,this.col_offset=r,this.end_lineno=a,this.end_col_offset=i,this},SkAst.astnodes.AsyncFor=function(t,s,e,n,o,r,a,i){return SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),SkAst.asserts.assert(null!=i),this.target=t,this.iter=s,this.body=e,this.orelse=n,this.lineno=o,this.col_offset=r,this.end_lineno=a,this.end_col_offset=i,this},SkAst.astnodes.While=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.test=t,this.body=s,this.orelse=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.If=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.test=t,this.body=s,this.orelse=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.With=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.items=t,this.body=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.AsyncWith=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.items=t,this.body=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.Raise=function(t,s,e,n,o,r,a,i){return SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),SkAst.asserts.assert(null!=i),this.exc=t,this.cause=s,this.inst=e,this.tback=n,this.lineno=o,this.col_offset=r,this.end_lineno=a,this.end_col_offset=i,this},SkAst.astnodes.Try=function(t,s,e,n,o,r,a,i){return SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),SkAst.asserts.assert(null!=i),this.body=t,this.handlers=s,this.orelse=e,this.finalbody=n,this.lineno=o,this.col_offset=r,this.end_lineno=a,this.end_col_offset=i,this},SkAst.astnodes.Assert=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.test=t,this.msg=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.Import=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.names=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.ImportFrom=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.module=t,this.names=s,this.level=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.Global=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.names=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Nonlocal=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.names=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Expr=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.value=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Pass=function(t,s,e,n){return SkAst.asserts.assert(null!=t),SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),this.lineno=t,this.col_offset=s,this.end_lineno=e,this.end_col_offset=n,this},SkAst.astnodes.Break=function(t,s,e,n){return SkAst.asserts.assert(null!=t),SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),this.lineno=t,this.col_offset=s,this.end_lineno=e,this.end_col_offset=n,this},SkAst.astnodes.Continue=function(t,s,e,n){return SkAst.asserts.assert(null!=t),SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),this.lineno=t,this.col_offset=s,this.end_lineno=e,this.end_col_offset=n,this},SkAst.astnodes.Print=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.dest=t,this.values=s,this.nl=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.Debugger=function(t,s,e,n){return SkAst.asserts.assert(null!=t),SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),this.lineno=t,this.col_offset=s,this.end_lineno=e,this.end_col_offset=n,this},SkAst.astnodes.BoolOp=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.op=t,this.values=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.BinOp=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.left=t,this.op=s,this.right=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.UnaryOp=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.op=t,this.operand=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.Lambda=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.args=t,this.body=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.IfExp=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.test=t,this.body=s,this.orelse=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.Dict=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.keys=t,this.values=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.Set=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.elts=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.ListComp=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.elt=t,this.generators=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.SetComp=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.elt=t,this.generators=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.DictComp=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.key=t,this.value=s,this.generators=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.GeneratorExp=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.elt=t,this.generators=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.Await=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.value=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Yield=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.value=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.YieldFrom=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.value=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Compare=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.left=t,this.ops=s,this.comparators=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.Call=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.func=t,this.args=s,this.keywords=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.Num=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.n=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Str=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.s=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.FormattedValue=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.value=t,this.conversion=s,this.format_spec=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.JoinedStr=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.values=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Bytes=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.s=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.NameConstant=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.value=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Ellipsis=function(t,s,e,n){return SkAst.asserts.assert(null!=t),SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),this.lineno=t,this.col_offset=s,this.end_lineno=e,this.end_col_offset=n,this},SkAst.astnodes.Constant=function(t,s,e,n,o){return SkAst.asserts.assert(null!=s),SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),this.value=t,this.lineno=s,this.col_offset=e,this.end_lineno=n,this.end_col_offset=o,this},SkAst.astnodes.Attribute=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.value=t,this.attr=s,this.ctx=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.Subscript=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.value=t,this.slice=s,this.ctx=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.Starred=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.value=t,this.ctx=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.Name=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.id=t,this.ctx=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.List=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.elts=t,this.ctx=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.Tuple=function(t,s,e,n,o,r){return SkAst.asserts.assert(null!=e),SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),this.elts=t,this.ctx=s,this.lineno=e,this.col_offset=n,this.end_lineno=o,this.end_col_offset=r,this},SkAst.astnodes.Slice=function(t,s,e){return this.lower=t,this.upper=s,this.step=e,this},SkAst.astnodes.ExtSlice=function(t){return this.dims=t,this},SkAst.astnodes.Index=function(t){return this.value=t,this},SkAst.astnodes.comprehension=function(t,s,e,n){return this.target=t,this.iter=s,this.ifs=e,this.is_async=n,this},SkAst.astnodes.ExceptHandler=function(t,s,e,n,o,r,a){return SkAst.asserts.assert(null!=n),SkAst.asserts.assert(null!=o),SkAst.asserts.assert(null!=r),SkAst.asserts.assert(null!=a),this.type=t,this.name=s,this.body=e,this.lineno=n,this.col_offset=o,this.end_lineno=r,this.end_col_offset=a,this},SkAst.astnodes.arguments_=function(t,s,e,n,o,r){return this.args=t,this.vararg=s,this.kwonlyargs=e,this.kw_defaults=n,this.kwarg=o,this.defaults=r,this},SkAst.astnodes.arg=function(t,s){return this.arg=t,this.annotation=s,this},SkAst.astnodes.keyword=function(t,s){return this.arg=t,this.value=s,this},SkAst.astnodes.alias=function(t,s){return this.name=t,this.asname=s,this},SkAst.astnodes.withitem=function(t,s){return this.context_expr=t,this.optional_vars=s,this},SkAst.astnodes.Module.prototype._astname="Module",SkAst.astnodes.Module.prototype._fields=["body",function(t){return t.body},"docstring",function(t){return t.docstring}],SkAst.astnodes.Interactive.prototype._astname="Interactive",SkAst.astnodes.Interactive.prototype._fields=["body",function(t){return t.body}],SkAst.astnodes.Expression.prototype._astname="Expression",SkAst.astnodes.Expression.prototype._fields=["body",function(t){return t.body}],SkAst.astnodes.Suite.prototype._astname="Suite",SkAst.astnodes.Suite.prototype._fields=["body",function(t){return t.body}],SkAst.astnodes.FunctionDef.prototype._astname="FunctionDef",SkAst.astnodes.FunctionDef.prototype._fields=["name",function(t){return t.name},"args",function(t){return t.args},"body",function(t){return t.body},"decorator_list",function(t){return t.decorator_list},"returns",function(t){return t.returns},"docstring",function(t){return t.docstring}],SkAst.astnodes.AsyncFunctionDef.prototype._astname="AsyncFunctionDef",SkAst.astnodes.AsyncFunctionDef.prototype._fields=["name",function(t){return t.name},"args",function(t){return t.args},"body",function(t){return t.body},"decorator_list",function(t){return t.decorator_list},"returns",function(t){return t.returns},"docstring",function(t){return t.docstring}],SkAst.astnodes.ClassDef.prototype._astname="ClassDef",SkAst.astnodes.ClassDef.prototype._fields=["name",function(t){return t.name},"bases",function(t){return t.bases},"keywords",function(t){return t.keywords},"body",function(t){return t.body},"decorator_list",function(t){return t.decorator_list},"docstring",function(t){return t.docstring}],SkAst.astnodes.Return.prototype._astname="Return",SkAst.astnodes.Return.prototype._fields=["value",function(t){return t.value}],SkAst.astnodes.Delete.prototype._astname="Delete",SkAst.astnodes.Delete.prototype._fields=["targets",function(t){return t.targets}],SkAst.astnodes.Assign.prototype._astname="Assign",SkAst.astnodes.Assign.prototype._fields=["targets",function(t){return t.targets},"value",function(t){return t.value}],SkAst.astnodes.AugAssign.prototype._astname="AugAssign",SkAst.astnodes.AugAssign.prototype._fields=["target",function(t){return t.target},"op",function(t){return t.op},"value",function(t){return t.value}],SkAst.astnodes.AnnAssign.prototype._astname="AnnAssign",SkAst.astnodes.AnnAssign.prototype._fields=["target",function(t){return t.target},"annotation",function(t){return t.annotation},"value",function(t){return t.value},"simple",function(t){return t.simple}],SkAst.astnodes.For.prototype._astname="For",SkAst.astnodes.For.prototype._fields=["target",function(t){return t.target},"iter",function(t){return t.iter},"body",function(t){return t.body},"orelse",function(t){return t.orelse}],SkAst.astnodes.AsyncFor.prototype._astname="AsyncFor",SkAst.astnodes.AsyncFor.prototype._fields=["target",function(t){return t.target},"iter",function(t){return t.iter},"body",function(t){return t.body},"orelse",function(t){return t.orelse}],SkAst.astnodes.While.prototype._astname="While",SkAst.astnodes.While.prototype._fields=["test",function(t){return t.test},"body",function(t){return t.body},"orelse",function(t){return t.orelse}],SkAst.astnodes.If.prototype._astname="If",SkAst.astnodes.If.prototype._fields=["test",function(t){return t.test},"body",function(t){return t.body},"orelse",function(t){return t.orelse}],SkAst.astnodes.With.prototype._astname="With",SkAst.astnodes.With.prototype._fields=["items",function(t){return t.items},"body",function(t){return t.body}],SkAst.astnodes.AsyncWith.prototype._astname="AsyncWith",SkAst.astnodes.AsyncWith.prototype._fields=["items",function(t){return t.items},"body",function(t){return t.body}],SkAst.astnodes.Raise.prototype._astname="Raise",SkAst.astnodes.Raise.prototype._fields=["exc",function(t){return t.exc},"cause",function(t){return t.cause},"inst",function(t){return t.inst},"tback",function(t){return t.tback}],SkAst.astnodes.Try.prototype._astname="Try",SkAst.astnodes.Try.prototype._fields=["body",function(t){return t.body},"handlers",function(t){return t.handlers},"orelse",function(t){return t.orelse},"finalbody",function(t){return t.finalbody}],SkAst.astnodes.Assert.prototype._astname="Assert",SkAst.astnodes.Assert.prototype._fields=["test",function(t){return t.test},"msg",function(t){return t.msg}],SkAst.astnodes.Import.prototype._astname="Import",SkAst.astnodes.Import.prototype._fields=["names",function(t){return t.names}],SkAst.astnodes.ImportFrom.prototype._astname="ImportFrom",SkAst.astnodes.ImportFrom.prototype._fields=["module",function(t){return t.module},"names",function(t){return t.names},"level",function(t){return t.level}],SkAst.astnodes.Global.prototype._astname="Global",SkAst.astnodes.Global.prototype._fields=["names",function(t){return t.names}],SkAst.astnodes.Nonlocal.prototype._astname="Nonlocal",SkAst.astnodes.Nonlocal.prototype._fields=["names",function(t){return t.names}],SkAst.astnodes.Expr.prototype._astname="Expr",SkAst.astnodes.Expr.prototype._fields=["value",function(t){return t.value}],SkAst.astnodes.Pass.prototype._astname="Pass",SkAst.astnodes.Pass.prototype._fields=[],SkAst.astnodes.Break.prototype._astname="Break",SkAst.astnodes.Break.prototype._fields=[],SkAst.astnodes.Continue.prototype._astname="Continue",SkAst.astnodes.Continue.prototype._fields=[],SkAst.astnodes.Print.prototype._astname="Print",SkAst.astnodes.Print.prototype._fields=["dest",function(t){return t.dest},"values",function(t){return t.values},"nl",function(t){return t.nl}],SkAst.astnodes.Debugger.prototype._astname="Debugger",SkAst.astnodes.Debugger.prototype._fields=[],SkAst.astnodes.BoolOp.prototype._astname="BoolOp",SkAst.astnodes.BoolOp.prototype._fields=["op",function(t){return t.op},"values",function(t){return t.values}],SkAst.astnodes.BinOp.prototype._astname="BinOp",SkAst.astnodes.BinOp.prototype._fields=["left",function(t){return t.left},"op",function(t){return t.op},"right",function(t){return t.right}],SkAst.astnodes.UnaryOp.prototype._astname="UnaryOp",SkAst.astnodes.UnaryOp.prototype._fields=["op",function(t){return t.op},"operand",function(t){return t.operand}],SkAst.astnodes.Lambda.prototype._astname="Lambda",SkAst.astnodes.Lambda.prototype._fields=["args",function(t){return t.args},"body",function(t){return t.body}],SkAst.astnodes.IfExp.prototype._astname="IfExp",SkAst.astnodes.IfExp.prototype._fields=["test",function(t){return t.test},"body",function(t){return t.body},"orelse",function(t){return t.orelse}],SkAst.astnodes.Dict.prototype._astname="Dict",SkAst.astnodes.Dict.prototype._fields=["keys",function(t){return t.keys},"values",function(t){return t.values}],SkAst.astnodes.Set.prototype._astname="Set",SkAst.astnodes.Set.prototype._fields=["elts",function(t){return t.elts}],SkAst.astnodes.ListComp.prototype._astname="ListComp",SkAst.astnodes.ListComp.prototype._fields=["elt",function(t){return t.elt},"generators",function(t){return t.generators}],SkAst.astnodes.SetComp.prototype._astname="SetComp",SkAst.astnodes.SetComp.prototype._fields=["elt",function(t){return t.elt},"generators",function(t){return t.generators}],SkAst.astnodes.DictComp.prototype._astname="DictComp",SkAst.astnodes.DictComp.prototype._fields=["key",function(t){return t.key},"value",function(t){return t.value},"generators",function(t){return t.generators}],SkAst.astnodes.GeneratorExp.prototype._astname="GeneratorExp",SkAst.astnodes.GeneratorExp.prototype._fields=["elt",function(t){return t.elt},"generators",function(t){return t.generators}],SkAst.astnodes.Await.prototype._astname="Await",SkAst.astnodes.Await.prototype._fields=["value",function(t){return t.value}],SkAst.astnodes.Yield.prototype._astname="Yield",SkAst.astnodes.Yield.prototype._fields=["value",function(t){return t.value}],SkAst.astnodes.YieldFrom.prototype._astname="YieldFrom",SkAst.astnodes.YieldFrom.prototype._fields=["value",function(t){return t.value}],SkAst.astnodes.Compare.prototype._astname="Compare",SkAst.astnodes.Compare.prototype._fields=["left",function(t){return t.left},"ops",function(t){return t.ops},"comparators",function(t){return t.comparators}],SkAst.astnodes.Call.prototype._astname="Call",SkAst.astnodes.Call.prototype._fields=["func",function(t){return t.func},"args",function(t){return t.args},"keywords",function(t){return t.keywords}],SkAst.astnodes.Num.prototype._astname="Num",SkAst.astnodes.Num.prototype._fields=["n",function(t){return t.n}],SkAst.astnodes.Str.prototype._astname="Str",SkAst.astnodes.Str.prototype._fields=["s",function(t){return t.s}],SkAst.astnodes.FormattedValue.prototype._astname="FormattedValue",SkAst.astnodes.FormattedValue.prototype._fields=["value",function(t){return t.value},"conversion",function(t){return t.conversion},"format_spec",function(t){return t.format_spec}],SkAst.astnodes.JoinedStr.prototype._astname="JoinedStr",SkAst.astnodes.JoinedStr.prototype._fields=["values",function(t){return t.values}],SkAst.astnodes.Bytes.prototype._astname="Bytes",SkAst.astnodes.Bytes.prototype._fields=["s",function(t){return t.s}],SkAst.astnodes.NameConstant.prototype._astname="NameConstant",SkAst.astnodes.NameConstant.prototype._fields=["value",function(t){return t.value}],SkAst.astnodes.Ellipsis.prototype._astname="Ellipsis",SkAst.astnodes.Ellipsis.prototype._fields=[],SkAst.astnodes.Constant.prototype._astname="Constant",SkAst.astnodes.Constant.prototype._fields=["value",function(t){return t.value}],SkAst.astnodes.Attribute.prototype._astname="Attribute",SkAst.astnodes.Attribute.prototype._fields=["value",function(t){return t.value},"attr",function(t){return t.attr},"ctx",function(t){return t.ctx}],SkAst.astnodes.Subscript.prototype._astname="Subscript",SkAst.astnodes.Subscript.prototype._fields=["value",function(t){return t.value},"slice",function(t){return t.slice},"ctx",function(t){return t.ctx}],SkAst.astnodes.Starred.prototype._astname="Starred",SkAst.astnodes.Starred.prototype._fields=["value",function(t){return t.value},"ctx",function(t){return t.ctx}],SkAst.astnodes.Name.prototype._astname="Name",SkAst.astnodes.Name.prototype._fields=["id",function(t){return t.id},"ctx",function(t){return t.ctx}],SkAst.astnodes.List.prototype._astname="List",SkAst.astnodes.List.prototype._fields=["elts",function(t){return t.elts},"ctx",function(t){return t.ctx}],SkAst.astnodes.Tuple.prototype._astname="Tuple",SkAst.astnodes.Tuple.prototype._fields=["elts",function(t){return t.elts},"ctx",function(t){return t.ctx}],SkAst.astnodes.Load.prototype._astname="Load",SkAst.astnodes.Load.prototype._isenum=!0,SkAst.astnodes.Store.prototype._astname="Store",SkAst.astnodes.Store.prototype._isenum=!0,SkAst.astnodes.Del.prototype._astname="Del",SkAst.astnodes.Del.prototype._isenum=!0,SkAst.astnodes.AugLoad.prototype._astname="AugLoad",SkAst.astnodes.AugLoad.prototype._isenum=!0,SkAst.astnodes.AugStore.prototype._astname="AugStore",SkAst.astnodes.AugStore.prototype._isenum=!0,SkAst.astnodes.Param.prototype._astname="Param",SkAst.astnodes.Param.prototype._isenum=!0,SkAst.astnodes.Slice.prototype._astname="Slice",SkAst.astnodes.Slice.prototype._fields=["lower",function(t){return t.lower},"upper",function(t){return t.upper},"step",function(t){return t.step}],SkAst.astnodes.ExtSlice.prototype._astname="ExtSlice",SkAst.astnodes.ExtSlice.prototype._fields=["dims",function(t){return t.dims}],SkAst.astnodes.Index.prototype._astname="Index",SkAst.astnodes.Index.prototype._fields=["value",function(t){return t.value}],SkAst.astnodes.And.prototype._astname="And",SkAst.astnodes.And.prototype._isenum=!0,SkAst.astnodes.Or.prototype._astname="Or",SkAst.astnodes.Or.prototype._isenum=!0,SkAst.astnodes.Add.prototype._astname="Add",SkAst.astnodes.Add.prototype._isenum=!0,SkAst.astnodes.Sub.prototype._astname="Sub",SkAst.astnodes.Sub.prototype._isenum=!0,SkAst.astnodes.Mult.prototype._astname="Mult",SkAst.astnodes.Mult.prototype._isenum=!0,SkAst.astnodes.MatMult.prototype._astname="MatMult",SkAst.astnodes.MatMult.prototype._isenum=!0,SkAst.astnodes.Div.prototype._astname="Div",SkAst.astnodes.Div.prototype._isenum=!0,SkAst.astnodes.Mod.prototype._astname="Mod",SkAst.astnodes.Mod.prototype._isenum=!0,SkAst.astnodes.Pow.prototype._astname="Pow",SkAst.astnodes.Pow.prototype._isenum=!0,SkAst.astnodes.LShift.prototype._astname="LShift",SkAst.astnodes.LShift.prototype._isenum=!0,SkAst.astnodes.RShift.prototype._astname="RShift",SkAst.astnodes.RShift.prototype._isenum=!0,SkAst.astnodes.BitOr.prototype._astname="BitOr",SkAst.astnodes.BitOr.prototype._isenum=!0,SkAst.astnodes.BitXor.prototype._astname="BitXor",SkAst.astnodes.BitXor.prototype._isenum=!0,SkAst.astnodes.BitAnd.prototype._astname="BitAnd",SkAst.astnodes.BitAnd.prototype._isenum=!0,SkAst.astnodes.FloorDiv.prototype._astname="FloorDiv",SkAst.astnodes.FloorDiv.prototype._isenum=!0,SkAst.astnodes.Invert.prototype._astname="Invert",SkAst.astnodes.Invert.prototype._isenum=!0,SkAst.astnodes.Not.prototype._astname="Not",SkAst.astnodes.Not.prototype._isenum=!0,SkAst.astnodes.UAdd.prototype._astname="UAdd",SkAst.astnodes.UAdd.prototype._isenum=!0,SkAst.astnodes.USub.prototype._astname="USub",SkAst.astnodes.USub.prototype._isenum=!0,SkAst.astnodes.Eq.prototype._astname="Eq",SkAst.astnodes.Eq.prototype._isenum=!0,SkAst.astnodes.NotEq.prototype._astname="NotEq",SkAst.astnodes.NotEq.prototype._isenum=!0,SkAst.astnodes.Lt.prototype._astname="Lt",SkAst.astnodes.Lt.prototype._isenum=!0,SkAst.astnodes.LtE.prototype._astname="LtE",SkAst.astnodes.LtE.prototype._isenum=!0,SkAst.astnodes.Gt.prototype._astname="Gt",SkAst.astnodes.Gt.prototype._isenum=!0,SkAst.astnodes.GtE.prototype._astname="GtE",SkAst.astnodes.GtE.prototype._isenum=!0,SkAst.astnodes.Is.prototype._astname="Is",SkAst.astnodes.Is.prototype._isenum=!0,SkAst.astnodes.IsNot.prototype._astname="IsNot",SkAst.astnodes.IsNot.prototype._isenum=!0,SkAst.astnodes.In.prototype._astname="In",SkAst.astnodes.In.prototype._isenum=!0,SkAst.astnodes.NotIn.prototype._astname="NotIn",SkAst.astnodes.NotIn.prototype._isenum=!0,SkAst.astnodes.comprehension.prototype._astname="comprehension",SkAst.astnodes.comprehension.prototype._fields=["target",function(t){return t.target},"iter",function(t){return t.iter},"ifs",function(t){return t.ifs},"is_async",function(t){return t.is_async}],SkAst.astnodes.ExceptHandler.prototype._astname="ExceptHandler",SkAst.astnodes.ExceptHandler.prototype._fields=["type",function(t){return t.type},"name",function(t){return t.name},"body",function(t){return t.body}],SkAst.astnodes.arguments_.prototype._astname="arguments",SkAst.astnodes.arguments_.prototype._fields=["args",function(t){return t.args},"vararg",function(t){return t.vararg},"kwonlyargs",function(t){return t.kwonlyargs},"kw_defaults",function(t){return t.kw_defaults},"kwarg",function(t){return t.kwarg},"defaults",function(t){return t.defaults}],SkAst.astnodes.arg.prototype._astname="arg",SkAst.astnodes.arg.prototype._fields=["arg",function(t){return t.arg},"annotation",function(t){return t.annotation}],SkAst.astnodes.keyword.prototype._astname="keyword",SkAst.astnodes.keyword.prototype._fields=["arg",function(t){return t.arg},"value",function(t){return t.value}],SkAst.astnodes.alias.prototype._astname="alias",SkAst.astnodes.alias.prototype._fields=["name",function(t){return t.name},"asname",function(t){return t.asname}],SkAst.astnodes.withitem.prototype._astname="withitem",SkAst.astnodes.withitem.prototype._fields=["context_expr",function(t){return t.context_expr},"optional_vars",function(t){return t.optional_vars}],SkAst.exportSymbol("Sk.astnodes",SkAst.astnodes);var __all__=["tok_name","ISTERMINAL","ISNONTERMINAL","ISEOF"],EXACT_TOKEN_TYPES={"!=":(tokens={T_ENDMARKER:0,T_NAME:1,T_NUMBER:2,T_STRING:3,T_NEWLINE:4,T_INDENT:5,T_DEDENT:6,T_LPAR:7,T_RPAR:8,T_LSQB:9,T_RSQB:10,T_COLON:11,T_COMMA:12,T_SEMI:13,T_PLUS:14,T_MINUS:15,T_STAR:16,T_SLASH:17,T_VBAR:18,T_AMPER:19,T_LESS:20,T_GREATER:21,T_EQUAL:22,T_DOT:23,T_PERCENT:24,T_LBRACE:25,T_RBRACE:26,T_EQEQUAL:27,T_NOTEQUAL:28,T_LESSEQUAL:29,T_GREATEREQUAL:30,T_TILDE:31,T_CIRCUMFLEX:32,T_LEFTSHIFT:33,T_RIGHTSHIFT:34,T_DOUBLESTAR:35,T_PLUSEQUAL:36,T_MINEQUAL:37,T_STAREQUAL:38,T_SLASHEQUAL:39,T_PERCENTEQUAL:40,T_AMPEREQUAL:41,T_VBAREQUAL:42,T_CIRCUMFLEXEQUAL:43,T_LEFTSHIFTEQUAL:44,T_RIGHTSHIFTEQUAL:45,T_DOUBLESTAREQUAL:46,T_DOUBLESLASH:47,T_DOUBLESLASHEQUAL:48,T_AT:49,T_ATEQUAL:50,T_RARROW:51,T_ELLIPSIS:52,T_OP:53,T_AWAIT:54,T_ASYNC:55,T_ERRORTOKEN:56,T_NT_OFFSET:256,T_N_TOKENS:60,T_COMMENT:57,T_NL:58,T_ENCODING:59}).NOTEQUAL,"%":tokens.PERCENT,"%=":tokens.PERCENTEQUAL,"&":tokens.AMPER,"&=":tokens.AMPEREQUAL,"(":tokens.LPAR,")":tokens.RPAR,"*":tokens.STAR,"**":tokens.DOUBLESTAR,"**=":tokens.DOUBLESTAREQUAL,"*=":tokens.STAREQUAL,"+":tokens.PLUS,"+=":tokens.PLUSEQUAL,",":tokens.COMMA,"-":tokens.MINUS,"-=":tokens.MINEQUAL,"->":tokens.RARROW,".":tokens.DOT,"...":tokens.ELLIPSIS,"/":tokens.SLASH,"//":tokens.DOUBLESLASH,"//=":tokens.DOUBLESLASHEQUAL,"/=":tokens.SLASHEQUAL,":":tokens.COLON,":=":tokens.COLONEQUAL,";":tokens.SEMI,"<":tokens.LESS,"<<":tokens.LEFTSHIFT,"<<=":tokens.LEFTSHIFTEQUAL,"<=":tokens.LESSEQUAL,"=":tokens.EQUAL,"==":tokens.EQEQUAL,">":tokens.GREATER,">=":tokens.GREATEREQUAL,">>":tokens.RIGHTSHIFT,">>=":tokens.RIGHTSHIFTEQUAL,"@":tokens.AT,"@=":tokens.ATEQUAL,"[":tokens.LSQB,"]":tokens.RSQB,"^":tokens.CIRCUMFLEX,"^=":tokens.CIRCUMFLEXEQUAL,"{":tokens.LBRACE,"|":tokens.VBAR,"|=":tokens.VBAREQUAL,"}":tokens.RBRACE,"~":tokens.TILDE},tok_name={};function ISTERMINAL(t){return t<tokens.T_NT_OFFSET}function ISNONTERMINAL(t){return t>=tokens.T_NT_OFFSET}function ISEOF(t){return t==tokens.T_ENDMARKER}!function(){for(var t in tokens)tok_name[tokens[t]]=t}(),__all__.concat(Object.keys(tok_name).map((function(t){return tok_name[t]}))),SkAst.token={},SkAst.token.tokens=tokens,SkAst.token.tok_name=tok_name,SkAst.token.EXACT_TOKEN_TYPES=EXACT_TOKEN_TYPES,SkAst.token.ISTERMINAL=ISTERMINAL,SkAst.token.ISNONTERMINAL=ISNONTERMINAL,SkAst.token.ISEOF=ISEOF,SkAst.exportSymbol("Sk.token",SkAst.token),SkAst.exportSymbol("Sk.token.tokens",SkAst.token.tokens),SkAst.exportSymbol("Sk.token.tok_name",SkAst.token.tok_name),SkAst.exportSymbol("Sk.token.EXACT_TOKEN_TYPES"),SkAst.exportSymbol("Sk.token.ISTERMINAL",SkAst.token.ISTERMINAL),SkAst.exportSymbol("Sk.token.ISNONTERMINAL",SkAst.token.ISNONTERMINAL),SkAst.exportSymbol("Sk.token.ISEOF",SkAst.token.ISEOF),SkAst.OpMap={"(":SkAst.token.tokens.T_LPAR,")":SkAst.token.tokens.T_RPAR,"[":SkAst.token.tokens.T_LSQB,"]":SkAst.token.tokens.T_RSQB,":":SkAst.token.tokens.T_COLON,",":SkAst.token.tokens.T_COMMA,";":SkAst.token.tokens.T_SEMI,"+":SkAst.token.tokens.T_PLUS,"-":SkAst.token.tokens.T_MINUS,"*":SkAst.token.tokens.T_STAR,"/":SkAst.token.tokens.T_SLASH,"|":SkAst.token.tokens.T_VBAR,"&":SkAst.token.tokens.T_AMPER,"<":SkAst.token.tokens.T_LESS,">":SkAst.token.tokens.T_GREATER,"=":SkAst.token.tokens.T_EQUAL,".":SkAst.token.tokens.T_DOT,"%":SkAst.token.tokens.T_PERCENT,"`":SkAst.token.tokens.T_BACKQUOTE,"{":SkAst.token.tokens.T_LBRACE,"}":SkAst.token.tokens.T_RBRACE,"@":SkAst.token.tokens.T_AT,"==":SkAst.token.tokens.T_EQEQUAL,"!=":SkAst.token.tokens.T_NOTEQUAL,"<>":SkAst.token.tokens.T_NOTEQUAL,"<=":SkAst.token.tokens.T_LESSEQUAL,">=":SkAst.token.tokens.T_GREATEREQUAL,"~":SkAst.token.tokens.T_TILDE,"^":SkAst.token.tokens.T_CIRCUMFLEX,"<<":SkAst.token.tokens.T_LEFTSHIFT,">>":SkAst.token.tokens.T_RIGHTSHIFT,"**":SkAst.token.tokens.T_DOUBLESTAR,"+=":SkAst.token.tokens.T_PLUSEQUAL,"-=":SkAst.token.tokens.T_MINEQUAL,"*=":SkAst.token.tokens.T_STAREQUAL,"/=":SkAst.token.tokens.T_SLASHEQUAL,"%=":SkAst.token.tokens.T_PERCENTEQUAL,"&=":SkAst.token.tokens.T_AMPEREQUAL,"|=":SkAst.token.tokens.T_VBAREQUAL,"^=":SkAst.token.tokens.T_CIRCUMFLEXEQUAL,"<<=":SkAst.token.tokens.T_LEFTSHIFTEQUAL,">>=":SkAst.token.tokens.T_RIGHTSHIFTEQUAL,"**=":SkAst.token.tokens.T_DOUBLESTAREQUAL,"//":SkAst.token.tokens.T_DOUBLESLASH,"//=":SkAst.token.tokens.T_DOUBLESLASHEQUAL,"->":SkAst.token.tokens.T_RARROW},SkAst.ParseTables={sym:{and_expr:257,and_test:258,annassign:259,arglist:260,argument:261,arith_expr:262,assert_stmt:263,async_funcdef:264,async_stmt:265,atom:266,atom_expr:267,augassign:268,break_stmt:269,classdef:270,comp_for:271,comp_if:272,comp_iter:273,comp_op:274,comparison:275,compound_stmt:276,continue_stmt:277,debugger_stmt:278,decorated:279,decorator:280,decorators:281,del_stmt:282,dictorsetmaker:283,dotted_as_name:284,dotted_as_names:285,dotted_name:286,encoding_decl:287,eval_input:288,except_clause:289,expr:290,expr_stmt:291,exprlist:292,factor:293,file_input:294,flow_stmt:295,for_stmt:296,funcdef:297,global_stmt:298,if_stmt:299,import_as_name:300,import_as_names:301,import_from:302,import_name:303,import_stmt:304,lambdef:305,lambdef_nocond:306,nonlocal_stmt:307,not_test:308,or_test:309,parameters:310,pass_stmt:311,power:312,print_stmt:313,raise_stmt:314,return_stmt:315,shift_expr:316,simple_stmt:317,single_input:256,sliceop:318,small_stmt:319,star_expr:320,stmt:321,subscript:322,subscriptlist:323,suite:324,term:325,test:326,test_nocond:327,testlist:328,testlist_comp:329,testlist_star_expr:330,tfpdef:331,trailer:332,try_stmt:333,typedargslist:334,varargslist:335,vfpdef:336,while_stmt:337,with_item:338,with_stmt:339,xor_expr:340,yield_arg:341,yield_expr:342,yield_stmt:343},number2symbol:{256:"single_input",257:"and_expr",258:"and_test",259:"annassign",260:"arglist",261:"argument",262:"arith_expr",263:"assert_stmt",264:"async_funcdef",265:"async_stmt",266:"atom",267:"atom_expr",268:"augassign",269:"break_stmt",270:"classdef",271:"comp_for",272:"comp_if",273:"comp_iter",274:"comp_op",275:"comparison",276:"compound_stmt",277:"continue_stmt",278:"debugger_stmt",279:"decorated",280:"decorator",281:"decorators",282:"del_stmt",283:"dictorsetmaker",284:"dotted_as_name",285:"dotted_as_names",286:"dotted_name",287:"encoding_decl",288:"eval_input",289:"except_clause",290:"expr",291:"expr_stmt",292:"exprlist",293:"factor",294:"file_input",295:"flow_stmt",296:"for_stmt",297:"funcdef",298:"global_stmt",299:"if_stmt",300:"import_as_name",301:"import_as_names",302:"import_from",303:"import_name",304:"import_stmt",305:"lambdef",306:"lambdef_nocond",307:"nonlocal_stmt",308:"not_test",309:"or_test",310:"parameters",311:"pass_stmt",312:"power",313:"print_stmt",314:"raise_stmt",315:"return_stmt",316:"shift_expr",317:"simple_stmt",318:"sliceop",319:"small_stmt",320:"star_expr",321:"stmt",322:"subscript",323:"subscriptlist",324:"suite",325:"term",326:"test",327:"test_nocond",328:"testlist",329:"testlist_comp",330:"testlist_star_expr",331:"tfpdef",332:"trailer",333:"try_stmt",334:"typedargslist",335:"varargslist",336:"vfpdef",337:"while_stmt",338:"with_item",339:"with_stmt",340:"xor_expr",341:"yield_arg",342:"yield_expr",343:"yield_stmt"},dfas:{256:[[[[1,1],[2,2],[3,1]],[[0,1]],[[3,1]]],{3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,14:1,15:1,16:1,17:1,18:1,19:1,20:1,21:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,31:1,32:1,33:1,34:1,35:1,36:1,37:1,38:1,39:1,40:1,41:1,42:1,43:1}],257:[[[[44,1]],[[45,0],[0,1]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],258:[[[[46,1]],[[47,0],[0,1]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],259:[[[[48,1]],[[49,2]],[[50,3],[0,2]],[[49,4]],[[0,4]]],{48:1}],260:[[[[51,1]],[[52,2],[0,1]],[[51,1],[0,2]]],{10:1,11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1,53:1}],261:[[[[10,1],[53,1],[49,2]],[[49,3]],[[50,1],[54,3],[0,2]],[[0,3]]],{10:1,11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1,53:1}],262:[[[[55,1]],[[26,0],[19,0],[0,1]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],263:[[[[37,1]],[[49,2]],[[52,3],[0,2]],[[49,4]],[[0,4]]],{37:1}],264:[[[[18,1]],[[56,2]],[[0,2]]],{18:1}],265:[[[[18,1]],[[57,2],[56,2],[58,2]],[[0,2]]],{18:1}],266:[[[[35,1],[23,2],[13,2],[25,3],[42,5],[28,2],[29,4],[32,2],[39,2],[34,2]],[[35,1],[0,1]],[[0,2]],[[59,6],[60,2],[61,6]],[[62,7],[63,2]],[[59,8],[64,2]],[[60,2]],[[63,2]],[[64,2]]],{13:1,23:1,25:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],267:[[[[15,1],[65,2]],[[65,2]],[[66,2],[0,2]]],{13:1,15:1,23:1,25:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],268:[[[[67,1],[68,1],[69,1],[70,1],[71,1],[72,1],[73,1],[74,1],[75,1],[76,1],[77,1],[78,1],[79,1]],[[0,1]]],{67:1,68:1,69:1,70:1,71:1,72:1,73:1,74:1,75:1,76:1,77:1,78:1,79:1}],269:[[[[4,1]],[[0,1]]],{4:1}],270:[[[[43,1]],[[28,2]],[[48,4],[25,3]],[[80,5],[60,6]],[[81,7]],[[60,6]],[[48,4]],[[0,7]]],{43:1}],271:[[[[33,2],[18,1]],[[33,2]],[[82,3]],[[83,4]],[[84,5]],[[85,6],[0,5]],[[0,6]]],{18:1,33:1}],272:[[[[7,1]],[[86,2]],[[85,3],[0,2]],[[0,3]]],{7:1}],273:[[[[87,1],[54,1]],[[0,1]]],{7:1,18:1,33:1}],274:[[[[88,1],[89,1],[90,1],[91,1],[30,2],[83,1],[92,1],[92,1],[93,3],[94,1]],[[0,1]],[[83,1]],[[30,1],[0,3]]],{30:1,83:1,88:1,89:1,90:1,91:1,92:1,93:1,94:1}],275:[[[[95,1]],[[96,0],[0,1]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],276:[[[[97,1],[57,1],[98,1],[99,1],[56,1],[100,1],[101,1],[58,1],[102,1]],[[0,1]]],{5:1,7:1,9:1,12:1,18:1,21:1,31:1,33:1,43:1}],277:[[[[14,1]],[[0,1]]],{14:1}],278:[[[[24,1]],[[0,1]]],{24:1}],279:[[[[103,1]],[[100,2],[104,2],[56,2]],[[0,2]]],{5:1}],280:[[[[5,1]],[[105,2]],[[3,3],[25,4]],[[0,3]],[[80,5],[60,6]],[[60,6]],[[3,3]]],{5:1}],281:[[[[106,1]],[[106,1],[0,1]]],{5:1}],282:[[[[16,1]],[[82,2]],[[0,2]]],{16:1}],283:[[[[53,1],[107,2],[49,3]],[[95,4]],[[52,5],[54,6],[0,2]],[[52,5],[48,7],[54,6],[0,3]],[[52,8],[54,6],[0,4]],[[107,9],[49,9],[0,5]],[[0,6]],[[49,4]],[[53,10],[49,11],[0,8]],[[52,5],[0,9]],[[95,12]],[[48,13]],[[52,8],[0,12]],[[49,12]]],{10:1,11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1,53:1}],284:[[[[105,1]],[[108,2],[0,1]],[[28,3]],[[0,3]]],{28:1}],285:[[[[109,1]],[[52,0],[0,1]]],{28:1}],286:[[[[28,1]],[[110,0],[0,1]]],{28:1}],287:[[[[28,1]],[[0,1]]],{28:1}],288:[[[[111,1]],[[3,1],[112,2]],[[0,2]]],{11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],289:[[[[113,1]],[[49,2],[0,1]],[[52,3],[108,3],[0,2]],[[49,4]],[[0,4]]],{113:1}],290:[[[[114,1]],[[115,0],[0,1]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],291:[[[[116,1]],[[50,2],[117,3],[118,4],[0,1]],[[61,5],[116,5]],[[61,4],[111,4]],[[0,4]],[[50,2],[0,5]]],{10:1,11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],292:[[[[95,1],[107,1]],[[52,2],[0,1]],[[95,1],[107,1],[0,2]]],{10:1,11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],293:[[[[26,1],[11,1],[19,1],[119,2]],[[120,2]],[[0,2]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],294:[[[[3,0],[121,0],[112,1]],[[0,1]]],{3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,14:1,15:1,16:1,17:1,18:1,19:1,20:1,21:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,31:1,32:1,33:1,34:1,35:1,36:1,37:1,38:1,39:1,40:1,41:1,42:1,43:1,112:1}],295:[[[[122,1],[123,1],[124,1],[125,1],[126,1]],[[0,1]]],{4:1,8:1,14:1,20:1,36:1}],296:[[[[33,1]],[[82,2]],[[83,3]],[[111,4]],[[48,5]],[[81,6]],[[127,7],[0,6]],[[48,8]],[[81,9]],[[0,9]]],{33:1}],297:[[[[12,1]],[[28,2]],[[128,3]],[[129,4],[48,5]],[[49,6]],[[81,7]],[[48,5]],[[0,7]]],{12:1}],298:[[[[38,1]],[[28,2]],[[52,1],[0,2]]],{38:1}],299:[[[[7,1]],[[49,2]],[[48,3]],[[81,4]],[[127,5],[130,1],[0,4]],[[48,6]],[[81,7]],[[0,7]]],{7:1}],300:[[[[28,1]],[[108,2],[0,1]],[[28,3]],[[0,3]]],{28:1}],301:[[[[131,1]],[[52,2],[0,1]],[[131,1],[0,2]]],{28:1}],302:[[[[17,1]],[[105,2],[110,3],[39,3]],[[27,4]],[[105,2],[27,4],[39,3],[110,3]],[[10,5],[25,6],[132,5]],[[0,5]],[[132,7]],[[60,5]]],{17:1}],303:[[[[27,1]],[[133,2]],[[0,2]]],{27:1}],304:[[[[134,1],[135,1]],[[0,1]]],{17:1,27:1}],305:[[[[22,1]],[[48,2],[136,3]],[[49,4]],[[48,2]],[[0,4]]],{22:1}],306:[[[[22,1]],[[48,2],[136,3]],[[86,4]],[[48,2]],[[0,4]]],{22:1}],307:[[[[40,1]],[[28,2]],[[52,1],[0,2]]],{40:1}],308:[[[[137,1],[30,2]],[[0,1]],[[46,1]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],309:[[[[138,1]],[[139,0],[0,1]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],310:[[[[25,1]],[[60,2],[140,3]],[[0,2]],[[60,2]]],{25:1}],311:[[[[6,1]],[[0,1]]],{6:1}],312:[[[[141,1]],[[53,2],[0,1]],[[120,3]],[[0,3]]],{13:1,15:1,23:1,25:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],313:[[[[41,1]],[[142,2],[49,3],[0,1]],[[49,4]],[[52,5],[0,3]],[[52,6],[0,4]],[[49,3],[0,5]],[[49,7]],[[52,8],[0,7]],[[49,7],[0,8]]],{41:1}],314:[[[[20,1]],[[49,2],[0,1]],[[52,3],[17,3],[0,2]],[[49,4]],[[52,5],[0,4]],[[49,6]],[[0,6]]],{20:1}],315:[[[[36,1]],[[111,2],[0,1]],[[0,2]]],{36:1}],316:[[[[143,1]],[[144,0],[142,0],[0,1]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],317:[[[[145,1]],[[3,2],[146,3]],[[0,2]],[[3,2],[145,1]]],{4:1,6:1,8:1,10:1,11:1,13:1,14:1,15:1,16:1,17:1,19:1,20:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,32:1,34:1,35:1,36:1,37:1,38:1,39:1,40:1,41:1,42:1}],318:[[[[48,1]],[[49,2],[0,1]],[[0,2]]],{48:1}],319:[[[[147,1],[148,1],[149,1],[150,1],[151,1],[152,1],[153,1],[154,1],[155,1],[156,1]],[[0,1]]],{4:1,6:1,8:1,10:1,11:1,13:1,14:1,15:1,16:1,17:1,19:1,20:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,32:1,34:1,35:1,36:1,37:1,38:1,39:1,40:1,41:1,42:1}],320:[[[[10,1]],[[95,2]],[[0,2]]],{10:1}],321:[[[[1,1],[2,1]],[[0,1]]],{4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,14:1,15:1,16:1,17:1,18:1,19:1,20:1,21:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,31:1,32:1,33:1,34:1,35:1,36:1,37:1,38:1,39:1,40:1,41:1,42:1,43:1}],322:[[[[48,1],[49,2]],[[157,3],[49,4],[0,1]],[[48,1],[0,2]],[[0,3]],[[157,3],[0,4]]],{11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1,48:1}],323:[[[[158,1]],[[52,2],[0,1]],[[158,1],[0,2]]],{11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1,48:1}],324:[[[[3,1],[1,2]],[[159,3]],[[0,2]],[[121,4]],[[160,2],[121,4]]],{3:1,4:1,6:1,8:1,10:1,11:1,13:1,14:1,15:1,16:1,17:1,19:1,20:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,32:1,34:1,35:1,36:1,37:1,38:1,39:1,40:1,41:1,42:1}],325:[[[[120,1]],[[5,0],[10,0],[161,0],[162,0],[163,0],[0,1]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],326:[[[[84,2],[164,1]],[[0,1]],[[7,3],[0,2]],[[84,4]],[[127,5]],[[49,1]]],{11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],327:[[[[165,1],[84,1]],[[0,1]]],{11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],328:[[[[49,1]],[[52,2],[0,1]],[[49,1],[0,2]]],{11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],329:[[[[107,1],[49,1]],[[52,2],[54,3],[0,1]],[[107,4],[49,4],[0,2]],[[0,3]],[[52,2],[0,4]]],{10:1,11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],330:[[[[107,1],[49,1]],[[52,2],[0,1]],[[107,1],[49,1],[0,2]]],{10:1,11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],331:[[[[28,1]],[[48,2],[0,1]],[[49,3]],[[0,3]]],{28:1}],332:[[[[25,1],[42,3],[110,2]],[[80,4],[60,5]],[[28,5]],[[166,6]],[[60,5]],[[0,5]],[[64,5]]],{25:1,42:1,110:1}],333:[[[[21,1]],[[48,2]],[[81,3]],[[167,4],[168,5]],[[48,6]],[[48,7]],[[81,8]],[[81,9]],[[127,10],[167,4],[168,5],[0,8]],[[0,9]],[[48,11]],[[81,12]],[[168,5],[0,12]]],{21:1}],334:[[[[169,1],[10,2],[53,3]],[[50,4],[52,5],[0,1]],[[169,6],[52,7],[0,2]],[[169,8]],[[49,9]],[[169,1],[53,3],[10,10],[0,5]],[[52,7],[0,6]],[[169,11],[53,3],[0,7]],[[52,12],[0,8]],[[52,5],[0,9]],[[169,13],[52,14],[0,10]],[[50,15],[52,7],[0,11]],[[0,12]],[[52,14],[0,13]],[[169,16],[53,3],[0,14]],[[49,6]],[[50,17],[52,14],[0,16]],[[49,13]]],{10:1,28:1,53:1}],335:[[[[53,1],[170,2],[10,3]],[[170,4]],[[52,5],[50,6],[0,2]],[[52,7],[170,8],[0,3]],[[52,9],[0,4]],[[10,10],[170,2],[53,1],[0,5]],[[49,11]],[[53,1],[170,12],[0,7]],[[52,7],[0,8]],[[0,9]],[[52,13],[170,14],[0,10]],[[52,5],[0,11]],[[52,7],[50,15],[0,12]],[[53,1],[170,16],[0,13]],[[52,13],[0,14]],[[49,8]],[[50,17],[52,13],[0,16]],[[49,14]]],{10:1,28:1,53:1}],336:[[[[28,1]],[[0,1]]],{28:1}],337:[[[[9,1]],[[49,2]],[[48,3]],[[81,4]],[[127,5],[0,4]],[[48,6]],[[81,7]],[[0,7]]],{9:1}],338:[[[[49,1]],[[108,2],[0,1]],[[95,3]],[[0,3]]],{11:1,13:1,15:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],339:[[[[31,1]],[[171,2]],[[52,1],[48,3]],[[81,4]],[[0,4]]],{31:1}],340:[[[[172,1]],[[173,0],[0,1]]],{11:1,13:1,15:1,19:1,23:1,25:1,26:1,28:1,29:1,32:1,34:1,35:1,39:1,42:1}],341:[[[[17,1],[111,2]],[[49,2]],[[0,2]]],{11:1,13:1,15:1,17:1,19:1,22:1,23:1,25:1,26:1,28:1,29:1,30:1,32:1,34:1,35:1,39:1,42:1}],342:[[[[8,1]],[[174,2],[0,1]],[[0,2]]],{8:1}],343:[[[[61,1]],[[0,1]]],{8:1}]},states:[[[[1,1],[2,2],[3,1]],[[0,1]],[[3,1]]],[[[44,1]],[[45,0],[0,1]]],[[[46,1]],[[47,0],[0,1]]],[[[48,1]],[[49,2]],[[50,3],[0,2]],[[49,4]],[[0,4]]],[[[51,1]],[[52,2],[0,1]],[[51,1],[0,2]]],[[[10,1],[53,1],[49,2]],[[49,3]],[[50,1],[54,3],[0,2]],[[0,3]]],[[[55,1]],[[26,0],[19,0],[0,1]]],[[[37,1]],[[49,2]],[[52,3],[0,2]],[[49,4]],[[0,4]]],[[[18,1]],[[56,2]],[[0,2]]],[[[18,1]],[[57,2],[56,2],[58,2]],[[0,2]]],[[[35,1],[23,2],[13,2],[25,3],[42,5],[28,2],[29,4],[32,2],[39,2],[34,2]],[[35,1],[0,1]],[[0,2]],[[59,6],[60,2],[61,6]],[[62,7],[63,2]],[[59,8],[64,2]],[[60,2]],[[63,2]],[[64,2]]],[[[15,1],[65,2]],[[65,2]],[[66,2],[0,2]]],[[[67,1],[68,1],[69,1],[70,1],[71,1],[72,1],[73,1],[74,1],[75,1],[76,1],[77,1],[78,1],[79,1]],[[0,1]]],[[[4,1]],[[0,1]]],[[[43,1]],[[28,2]],[[48,4],[25,3]],[[80,5],[60,6]],[[81,7]],[[60,6]],[[48,4]],[[0,7]]],[[[33,2],[18,1]],[[33,2]],[[82,3]],[[83,4]],[[84,5]],[[85,6],[0,5]],[[0,6]]],[[[7,1]],[[86,2]],[[85,3],[0,2]],[[0,3]]],[[[87,1],[54,1]],[[0,1]]],[[[88,1],[89,1],[90,1],[91,1],[30,2],[83,1],[92,1],[92,1],[93,3],[94,1]],[[0,1]],[[83,1]],[[30,1],[0,3]]],[[[95,1]],[[96,0],[0,1]]],[[[97,1],[57,1],[98,1],[99,1],[56,1],[100,1],[101,1],[58,1],[102,1]],[[0,1]]],[[[14,1]],[[0,1]]],[[[24,1]],[[0,1]]],[[[103,1]],[[100,2],[104,2],[56,2]],[[0,2]]],[[[5,1]],[[105,2]],[[3,3],[25,4]],[[0,3]],[[80,5],[60,6]],[[60,6]],[[3,3]]],[[[106,1]],[[106,1],[0,1]]],[[[16,1]],[[82,2]],[[0,2]]],[[[53,1],[107,2],[49,3]],[[95,4]],[[52,5],[54,6],[0,2]],[[52,5],[48,7],[54,6],[0,3]],[[52,8],[54,6],[0,4]],[[107,9],[49,9],[0,5]],[[0,6]],[[49,4]],[[53,10],[49,11],[0,8]],[[52,5],[0,9]],[[95,12]],[[48,13]],[[52,8],[0,12]],[[49,12]]],[[[105,1]],[[108,2],[0,1]],[[28,3]],[[0,3]]],[[[109,1]],[[52,0],[0,1]]],[[[28,1]],[[110,0],[0,1]]],[[[28,1]],[[0,1]]],[[[111,1]],[[3,1],[112,2]],[[0,2]]],[[[113,1]],[[49,2],[0,1]],[[52,3],[108,3],[0,2]],[[49,4]],[[0,4]]],[[[114,1]],[[115,0],[0,1]]],[[[116,1]],[[50,2],[117,3],[118,4],[0,1]],[[61,5],[116,5]],[[61,4],[111,4]],[[0,4]],[[50,2],[0,5]]],[[[95,1],[107,1]],[[52,2],[0,1]],[[95,1],[107,1],[0,2]]],[[[26,1],[11,1],[19,1],[119,2]],[[120,2]],[[0,2]]],[[[3,0],[121,0],[112,1]],[[0,1]]],[[[122,1],[123,1],[124,1],[125,1],[126,1]],[[0,1]]],[[[33,1]],[[82,2]],[[83,3]],[[111,4]],[[48,5]],[[81,6]],[[127,7],[0,6]],[[48,8]],[[81,9]],[[0,9]]],[[[12,1]],[[28,2]],[[128,3]],[[129,4],[48,5]],[[49,6]],[[81,7]],[[48,5]],[[0,7]]],[[[38,1]],[[28,2]],[[52,1],[0,2]]],[[[7,1]],[[49,2]],[[48,3]],[[81,4]],[[127,5],[130,1],[0,4]],[[48,6]],[[81,7]],[[0,7]]],[[[28,1]],[[108,2],[0,1]],[[28,3]],[[0,3]]],[[[131,1]],[[52,2],[0,1]],[[131,1],[0,2]]],[[[17,1]],[[105,2],[110,3],[39,3]],[[27,4]],[[105,2],[27,4],[39,3],[110,3]],[[10,5],[25,6],[132,5]],[[0,5]],[[132,7]],[[60,5]]],[[[27,1]],[[133,2]],[[0,2]]],[[[134,1],[135,1]],[[0,1]]],[[[22,1]],[[48,2],[136,3]],[[49,4]],[[48,2]],[[0,4]]],[[[22,1]],[[48,2],[136,3]],[[86,4]],[[48,2]],[[0,4]]],[[[40,1]],[[28,2]],[[52,1],[0,2]]],[[[137,1],[30,2]],[[0,1]],[[46,1]]],[[[138,1]],[[139,0],[0,1]]],[[[25,1]],[[60,2],[140,3]],[[0,2]],[[60,2]]],[[[6,1]],[[0,1]]],[[[141,1]],[[53,2],[0,1]],[[120,3]],[[0,3]]],[[[41,1]],[[142,2],[49,3],[0,1]],[[49,4]],[[52,5],[0,3]],[[52,6],[0,4]],[[49,3],[0,5]],[[49,7]],[[52,8],[0,7]],[[49,7],[0,8]]],[[[20,1]],[[49,2],[0,1]],[[52,3],[17,3],[0,2]],[[49,4]],[[52,5],[0,4]],[[49,6]],[[0,6]]],[[[36,1]],[[111,2],[0,1]],[[0,2]]],[[[143,1]],[[144,0],[142,0],[0,1]]],[[[145,1]],[[3,2],[146,3]],[[0,2]],[[3,2],[145,1]]],[[[48,1]],[[49,2],[0,1]],[[0,2]]],[[[147,1],[148,1],[149,1],[150,1],[151,1],[152,1],[153,1],[154,1],[155,1],[156,1]],[[0,1]]],[[[10,1]],[[95,2]],[[0,2]]],[[[1,1],[2,1]],[[0,1]]],[[[48,1],[49,2]],[[157,3],[49,4],[0,1]],[[48,1],[0,2]],[[0,3]],[[157,3],[0,4]]],[[[158,1]],[[52,2],[0,1]],[[158,1],[0,2]]],[[[3,1],[1,2]],[[159,3]],[[0,2]],[[121,4]],[[160,2],[121,4]]],[[[120,1]],[[5,0],[10,0],[161,0],[162,0],[163,0],[0,1]]],[[[84,2],[164,1]],[[0,1]],[[7,3],[0,2]],[[84,4]],[[127,5]],[[49,1]]],[[[165,1],[84,1]],[[0,1]]],[[[49,1]],[[52,2],[0,1]],[[49,1],[0,2]]],[[[107,1],[49,1]],[[52,2],[54,3],[0,1]],[[107,4],[49,4],[0,2]],[[0,3]],[[52,2],[0,4]]],[[[107,1],[49,1]],[[52,2],[0,1]],[[107,1],[49,1],[0,2]]],[[[28,1]],[[48,2],[0,1]],[[49,3]],[[0,3]]],[[[25,1],[42,3],[110,2]],[[80,4],[60,5]],[[28,5]],[[166,6]],[[60,5]],[[0,5]],[[64,5]]],[[[21,1]],[[48,2]],[[81,3]],[[167,4],[168,5]],[[48,6]],[[48,7]],[[81,8]],[[81,9]],[[127,10],[167,4],[168,5],[0,8]],[[0,9]],[[48,11]],[[81,12]],[[168,5],[0,12]]],[[[169,1],[10,2],[53,3]],[[50,4],[52,5],[0,1]],[[169,6],[52,7],[0,2]],[[169,8]],[[49,9]],[[169,1],[53,3],[10,10],[0,5]],[[52,7],[0,6]],[[169,11],[53,3],[0,7]],[[52,12],[0,8]],[[52,5],[0,9]],[[169,13],[52,14],[0,10]],[[50,15],[52,7],[0,11]],[[0,12]],[[52,14],[0,13]],[[169,16],[53,3],[0,14]],[[49,6]],[[50,17],[52,14],[0,16]],[[49,13]]],[[[53,1],[170,2],[10,3]],[[170,4]],[[52,5],[50,6],[0,2]],[[52,7],[170,8],[0,3]],[[52,9],[0,4]],[[10,10],[170,2],[53,1],[0,5]],[[49,11]],[[53,1],[170,12],[0,7]],[[52,7],[0,8]],[[0,9]],[[52,13],[170,14],[0,10]],[[52,5],[0,11]],[[52,7],[50,15],[0,12]],[[53,1],[170,16],[0,13]],[[52,13],[0,14]],[[49,8]],[[50,17],[52,13],[0,16]],[[49,14]]],[[[28,1]],[[0,1]]],[[[9,1]],[[49,2]],[[48,3]],[[81,4]],[[127,5],[0,4]],[[48,6]],[[81,7]],[[0,7]]],[[[49,1]],[[108,2],[0,1]],[[95,3]],[[0,3]]],[[[31,1]],[[171,2]],[[52,1],[48,3]],[[81,4]],[[0,4]]],[[[172,1]],[[173,0],[0,1]]],[[[17,1],[111,2]],[[49,2]],[[0,2]]],[[[8,1]],[[174,2],[0,1]],[[0,2]]],[[[61,1]],[[0,1]]]],labels:[[0,"EMPTY"],[317,null],[276,null],[4,null],[1,"break"],[49,null],[1,"pass"],[1,"if"],[1,"yield"],[1,"while"],[16,null],[31,null],[1,"def"],[1,"null"],[1,"continue"],[54,null],[1,"del"],[1,"from"],[55,null],[14,null],[1,"raise"],[1,"try"],[1,"lambda"],[1,"False"],[1,"debugger"],[7,null],[15,null],[1,"import"],[1,null],[25,null],[1,"not"],[1,"with"],[1,"True"],[1,"for"],[2,null],[3,null],[1,"return"],[1,"assert"],[1,"global"],[52,null],[1,"nonlocal"],[1,"print"],[9,null],[1,"class"],[316,null],[19,null],[308,null],[1,"and"],[11,null],[326,null],[22,null],[261,null],[12,null],[35,null],[271,null],[325,null],[297,null],[339,null],[296,null],[329,null],[8,null],[342,null],[283,null],[26,null],[10,null],[266,null],[332,null],[45,null],[40,null],[41,null],[44,null],[37,null],[39,null],[36,null],[43,null],[50,null],[46,null],[42,null],[38,null],[48,null],[260,null],[324,null],[292,null],[1,"in"],[309,null],[273,null],[327,null],[272,null],[29,null],[30,null],[27,null],[20,null],[28,null],[1,"is"],[21,null],[290,null],[274,null],[265,null],[333,null],[279,null],[270,null],[299,null],[337,null],[281,null],[264,null],[286,null],[280,null],[320,null],[1,"as"],[284,null],[23,null],[328,null],[0,null],[1,"except"],[340,null],[18,null],[330,null],[268,null],[259,null],[312,null],[293,null],[321,null],[315,null],[343,null],[269,null],[277,null],[314,null],[1,"else"],[310,null],[51,null],[1,"elif"],[300,null],[301,null],[285,null],[302,null],[303,null],[335,null],[275,null],[258,null],[1,"or"],[334,null],[267,null],[34,null],[262,null],[33,null],[319,null],[13,null],[307,null],[291,null],[304,null],[263,null],[278,null],[298,null],[311,null],[282,null],[295,null],[313,null],[318,null],[322,null],[5,null],[6,null],[24,null],[47,null],[17,null],[305,null],[306,null],[323,null],[289,null],[1,"finally"],[331,null],[336,null],[338,null],[257,null],[32,null],[341,null]],keywords:{False:23,null:13,True:32,and:47,as:108,assert:37,break:4,class:43,continue:14,debugger:24,def:12,del:16,elif:130,else:127,except:113,finally:168,for:33,from:17,global:38,if:7,import:27,in:83,is:93,lambda:22,nonlocal:40,not:30,or:139,pass:6,print:41,raise:20,return:36,try:21,while:9,with:31,yield:8},tokens:{0:112,1:28,2:34,3:35,4:3,5:159,6:160,7:25,8:60,9:42,10:64,11:48,12:52,13:146,14:19,15:26,16:10,17:163,18:115,19:45,20:91,21:94,22:50,23:110,24:161,25:29,26:63,27:90,28:92,29:88,30:89,31:11,32:173,33:144,34:142,35:53,36:73,37:71,38:78,39:72,40:68,41:69,42:77,43:74,44:70,45:67,46:76,47:162,48:79,49:5,50:75,51:129,52:39,54:15,55:18},start:256};var tokens=SkAst.token.tokens,TokenError=SkAst.builtin.SyntaxError,IndentationError=SkAst.builtin.SyntaxError;function TokenInfo(t,s,e,n,o){this.type=t,this.string=s,this.start=e,this.end=n,this.line=o}function group(t){return"("+Array.prototype.slice.call(arguments).join("|")+")"}function any(t){return group.apply(null,arguments)+"*"}function maybe(t){return group.apply(null,arguments)+"?"}TokenInfo.prototype.exact_type=function(){return this.type==tokens.T_OP&&this.string in SkAst.token.EXACT_TOKEN_TYPES?SkAst.token.EXACT_TOKEN_TYPES[this.string]:this.type};var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);function regexEscape(t){return t&&reHasRegExpChar.test(t)?t.replace(reRegExpChar,"\\$&"):t}function contains(t,s){for(var e=t.length;e--;)if(t[e]===s)return!0;return!1}function rstrip(t,s){var e;for(e=t.length;e>0&&-1!==s.indexOf(t.charAt(e-1));--e);return t.substring(0,e)}var isidentifier_regex,the_underscore="_",Lu="[A-Z]",Ll="[a-z]",Lt="[\\u{10B99}-\\u{10B9C}\\u{112A9}\\u{115DC}-\\u{115DD}\\u034F\\u115F-\\u1160\\u17B4-\\u17B5\\u2065\\u3164\\uFFA0\\uFFF0-\\uFFF8\\u{E0000}\\u{E0002}-\\u{E001F}\\u{E0080}-\\u{E00FF}\\u{E01F0}-\\u{E0FFF}\\u{112A9}\\u00D7]",Lm="[\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u06E5-\\u06E6\\u07F4-\\u07F5\\u0971\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1DFD-\\u1DFF\\u2E2F\\u30FC\\uA67F\\uA69C-\\uA69D\\uA717-\\uA71F\\uA788\\uA7F8-\\uA7F9\\uAB5C-\\uAB5F\\uFF70\\uFF9E-\\uFF9F\\u{16F93}-\\u{16F9F}\\u02D0-\\u02D1\\u0640\\u07FA\\u0E46\\u0EC6\\u1843\\u1AA7\\u1C7B\\u3005\\u3031-\\u3035\\u309D-\\u309E\\u30FC-\\u30FE\\uA015\\uA60C\\uA9CF\\uA9E6\\uAA70\\uAADD\\uAAF3-\\uAAF4\\uFF70\\u{16B42}-\\u{16B43}\\u{16FE0}-\\u{16FE1}\\u02B0-\\u02B8\\u02C0-\\u02C1\\u02E0-\\u02E4\\u037A\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C-\\u2C7D\\uA69C-\\uA69D\\uA770\\uA7F8-\\uA7F9\\uAB5C-\\uAB5F\\uFF9E-\\uFF9F\\u02B2\\u1D62\\u1DA4\\u1DA8\\u2071\\u2C7C\\u2E18-\\u2E19\\u2E2F]",Lo="[\\u2135-\\u2138\\u{1EE00}-\\u{1EE03}\\u{1EE05}-\\u{1EE1F}\\u{1EE21}-\\u{1EE22}\\u{1EE24}\\u{1EE27}\\u{1EE29}-\\u{1EE32}\\u{1EE34}-\\u{1EE37}\\u{1EE39}\\u{1EE3B}\\u{1EE42}\\u{1EE47}\\u{1EE49}\\u{1EE4B}\\u{1EE4D}-\\u{1EE4F}\\u{1EE51}-\\u{1EE52}\\u{1EE54}\\u{1EE57}\\u{1EE59}\\u{1EE5B}\\u{1EE5D}\\u{1EE5F}\\u{1EE61}-\\u{1EE62}\\u{1EE64}\\u{1EE67}-\\u{1EE6A}\\u{1EE6C}-\\u{1EE72}\\u{1EE74}-\\u{1EE77}\\u{1EE79}-\\u{1EE7C}\\u{1EE7E}\\u{1EE80}-\\u{1EE89}\\u{1EE8B}-\\u{1EE9B}\\u{1EEA1}-\\u{1EEA3}\\u{1EEA5}-\\u{1EEA9}\\u{1EEAB}-\\u{1EEBB}\\u3006\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uF900-\\uFA6D\\uFA70-\\uFAD9\\u{17000}-\\u{187F1}\\u{18800}-\\u{18AF2}\\u{1B170}-\\u{1B2FB}\\u{20000}-\\u{2A6D6}\\u{2A700}-\\u{2B734}\\u{2B740}-\\u{2B81D}\\u{2B820}-\\u{2CEA1}\\u{2CEB0}-\\u{2EBE0}\\u{2F800}-\\u{2FA1D}\\uAAC0\\uAAC2\\uFE20-\\uFE2F\\u{10D22}-\\u{10D23}\\u{1135D}\\u00AA\\u00BA\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uFA0E-\\uFA0F\\uFA11\\uFA13-\\uFA14\\uFA1F\\uFA21\\uFA23-\\uFA24\\uFA27-\\uFA29\\u{20000}-\\u{2A6D6}\\u{2A700}-\\u{2B734}\\u{2B740}-\\u{2B81D}\\u{2B820}-\\u{2CEA1}\\u{2CEB0}-\\u{2EBE0}\\u115F-\\u1160\\u3164\\uFFA0\\u0673\\u17A3-\\u17A4\\u0E40-\\u0E44\\u0EC0-\\u0EC4\\u19B5-\\u19B7\\u19BA\\uAAB5-\\uAAB6\\uAAB9\\uAABB-\\uAABC]",Nl="[\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u2170-\\u217F\\u2160-\\u216F]",Mn="[\\u104A-\\u104B\\u102B-\\u102C\\u102D-\\u1030\\u1031\\u1032-\\u1036\\u1038\\u103B-\\u103C\\u103D-\\u103E\\u1056-\\u1057\\u1058-\\u1059\\u105E-\\u1060\\u1062\\u1067-\\u1068\\u1071-\\u1074\\u1082\\u1083-\\u1084\\u1085-\\u1086\\u109C\\u109D\\u1037\\u1039-\\u103A\\u1087-\\u108C\\u108D\\u108F\\u109A-\\u109B\\uA9E5\\uAA7B\\uAA7C\\uAA7D\\uA9E6\\uAA70\\u104A-\\u104B]",Mc="[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E-\\u094F\\u0982-\\u0983\\u09BE-\\u09C0\\u09C7-\\u09C8\\u09CB-\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB-\\u0ACC\\u0B02-\\u0B03\\u0B3E\\u0B40\\u0B47-\\u0B48\\u0B4B-\\u0B4C\\u0B57\\u0BBE-\\u0BBF\\u0BC1-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82-\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7-\\u0CC8\\u0CCA-\\u0CCB\\u0CD5-\\u0CD6\\u0D02-\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82-\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2-\\u0DF3\\u0F7F\\u102B-\\u102C\\u1031\\u1038\\u103B-\\u103C\\u1056-\\u1057\\u1062\\u1067-\\u1068\\u1083-\\u1084\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7-\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930-\\u1931\\u1933-\\u1938\\u1A19-\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63-\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B82\\u1BA1\\u1BA6-\\u1BA7\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1C24-\\u1C2B\\u1C34-\\u1C35\\u1CF2-\\u1CF3\\uA823-\\uA824\\uA827\\uA880-\\uA881\\uA8B4-\\uA8C3\\uA952\\uA983\\uA9B4-\\uA9B5\\uA9BA-\\uA9BB\\uA9BD-\\uA9BF\\uAA2F-\\uAA30\\uAA33-\\uAA34\\uAA4D\\uAAEB\\uAAEE-\\uAAEF\\uAAF5\\uABE3-\\uABE4\\uABE6-\\uABE7\\uABE9-\\uABEA\\u{11000}\\u{11002}\\u{11082}\\u{110B0}-\\u{110B2}\\u{110B7}-\\u{110B8}\\u{1112C}\\u{11145}-\\u{11146}\\u{11182}\\u{111B3}-\\u{111B5}\\u{111BF}\\u{1122C}-\\u{1122E}\\u{11232}-\\u{11233}\\u{112E0}-\\u{112E2}\\u{11302}-\\u{11303}\\u{1133E}-\\u{1133F}\\u{11341}-\\u{11344}\\u{11347}-\\u{11348}\\u{1134B}-\\u{1134C}\\u{11357}\\u{11362}-\\u{11363}\\u{11435}-\\u{11437}\\u{11440}-\\u{11441}\\u{11445}\\u{114B0}-\\u{114B2}\\u{114B9}\\u{114BB}-\\u{114BE}\\u{114C1}\\u{115AF}-\\u{115B1}\\u{115B8}-\\u{115BB}\\u{115BE}\\u{11630}-\\u{11632}\\u{1163B}-\\u{1163C}\\u{1163E}\\u{116AC}\\u{116AE}-\\u{116AF}\\u{11720}-\\u{11721}\\u{11726}\\u{1182C}-\\u{1182E}\\u{11838}\\u{11A39}\\u{11A57}-\\u{11A58}\\u{11A97}\\u{11C2F}\\u{11C3E}\\u{11CA9}\\u{11CB1}\\u{11CB4}\\u{11D8A}-\\u{11D8E}\\u{11D93}-\\u{11D94}\\u{11D96}\\u{11EF5}-\\u{11EF6}\\u{16F51}-\\u{16F7E}\\u0F3E-\\u0F3F\\u1087-\\u108C\\u108F\\u109A-\\u109B\\u1B44\\u1BAA\\u1CE1\\u1CF7\\u302E-\\u302F\\uA953\\uA9C0\\uAA7B\\uAA7D\\uABEC\\u{111C0}\\u{11235}\\u{1134D}\\u{116B6}\\u{1D16D}-\\u{1D172}\\u09BE\\u09D7\\u0B3E\\u0B57\\u0BBE\\u0BD7\\u0CC2\\u0CD5-\\u0CD6\\u0D3E\\u0D57\\u0DCF\\u0DDF\\u302E-\\u302F\\u{1133E}\\u{11357}\\u{114B0}\\u{114BD}\\u{115AF}\\u{1D165}\\u{1D16E}-\\u{1D172}]",Nd="[\\u{1D7CE}-\\u{1D7FF}\\uFF10-\\uFF19]",Pc="\\u2040",Other_ID_Start="[\\u1885-\\u1886\\u2118\\u212E\\u309B-\\u309C]",Other_ID_Continue="[\\u00B7\\u0387\\u1369-\\u1371\\u19DA]",id_start=group(Lu,Ll,Lt,Lm,Lo,Nl,the_underscore,Other_ID_Start),id_continue=group(id_start,Mn,Mc,Nd,Pc,Other_ID_Continue);function isidentifier(t){var s=t.normalize("NFKC");return isidentifier_regex.test(s)}!1===RegExp().unicode?isidentifier_regex=new RegExp("^"+id_start+"+"+id_continue+"*$","u"):(id_start=group(Lu,Ll,the_underscore),id_continue=group(id_start,"[0-9]"),isidentifier_regex=new RegExp("^"+id_start+"+"+id_continue+"*$"));var Whitespace="[ \\f\\t]*",Comment_="#[^\\r\\n]*",Ignore=Whitespace+any("\\\\\\r?\\n"+Whitespace)+maybe(Comment_),Name="\\w+",Exponent="[eE][-+]?[0-9](?:_?[0-9])*",Pointfloat=group("[0-9](?:_?[0-9])*\\.(?:[0-9](?:_?[0-9])*)?","\\.[0-9](?:_?[0-9])*")+maybe(Exponent),Expfloat="[0-9](?:_?[0-9])*"+Exponent,Floatnumber=group(Pointfloat,Expfloat),Imagnumber=group("[0-9](?:_?[0-9])*[jJ]",Floatnumber+"[jJ]");function _all_string_prefixes(){return["","FR","RF","Br","BR","Fr","r","B","R","b","bR","f","rb","rB","F","Rf","U","rF","u","RB","br","fR","fr","rf","Rb"]}var _step,StringPrefix=group.apply(null,_all_string_prefixes()),Single="^[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",Double='^[^"\\\\]*(?:\\\\.[^"\\\\]*)*"',Single3="^[^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*'''",Double3='^[^"\\\\]*(?:(?:\\\\.|"(?!""))[^"\\\\]*)*"""',Triple=group(StringPrefix+"'''",StringPrefix+'"""'),String_=group(StringPrefix+"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*'",StringPrefix+'"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*"'),EXACT_TOKENS_SORTED=Object.keys(SkAst.token.EXACT_TOKEN_TYPES).sort(),Special=group.apply(void 0,EXACT_TOKENS_SORTED.reverse().map((function(t){return regexEscape(t)}))),Funny=group("\\r?\\n",Special),ContStr=group(StringPrefix+"'[^\\n'\\\\]*(?:\\\\.[^\\n'\\\\]*)*"+group("'","\\\\\\r?\\n"),StringPrefix+'"[^\\n"\\\\]*(?:\\\\.[^\\n"\\\\]*)*'+group('"',"\\\\\\r?\\n")),PseudoExtras=group("\\\\\\r?\\n|$",Comment_,Triple),endpats={},prefixes=_all_string_prefixes(),_iterator=_createForOfIteratorHelper(prefixes);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _prefix=_step.value;endpats[_prefix+"'"]=RegExp(Single),endpats[_prefix+'"']=RegExp(Double),endpats[_prefix+"'''"]=RegExp(Single3),endpats[_prefix+'"""']=RegExp(Double3)}}catch(t){_iterator.e(t)}finally{_iterator.f()}var _step2,single_quoted=[],triple_quoted=[],_iterator2=_createForOfIteratorHelper(prefixes);try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var t=_step2.value;single_quoted.push(t+'"'),single_quoted.push(t+"'"),triple_quoted.push(t+'"""'),triple_quoted.push(t+"'''")}}catch(t){_iterator2.e(t)}finally{_iterator2.f()}var PseudoTokenRegex,tabsize=8;function _setupTokenRegexes(){var t=SkAst.__future__.l_suffix?"(?:L?)":"",s="0([oO])(?:_?[0-7])+"+t,e="0([oO]?)(?:_?[0-7])+"+t,n="(?:0(?:_?0)*|[1-9](?:_?[0-9])*)"+t,o=group("0[xX](?:_?[0-9a-fA-F])+"+t,"0[bB](?:_?[01])+"+t,SkAst.__future__.silent_octal_literal?e:s,n),r=group(Imagnumber,Floatnumber,o),a=Whitespace+group(PseudoExtras,r,Funny,ContStr,Name);PseudoTokenRegex=RegExp(a)}function _tokenize(t,s,e,n){var o=0,r=0,a=0,i="",l=0,u=null,_=[0],f=[0,0],d=[0,0],S=null,A=void 0,k=void 0,c=void 0,p=void 0;void 0!==s&&("utf-8-sig"==s&&(s="utf-8"),e(new TokenInfo(tokens.T_ENCODING,s,[0,0],[0,0],"")));for(var m="",h="";;){try{m=h,h=t()}catch(t){h=""}o+=1;var C=0,E=h.length;if(i){if(!h)throw new TokenError("EOF in multi-line string",n,f[0],[f,d]);A.lastIndex=0;var L=A.exec(h);if(!L){if(l&&"\\\n"!==h.substring(h.length-2)&&"\\\r\n"!==h.substring(h.length-3)){e(new TokenInfo(tokens.T_ERRORTOKEN,i+h,k,[o,h.length],u)),i="",u=null;continue}i+=h,u+=h;continue}C=c=L[0].length,e(new TokenInfo(tokens.T_STRING,i+h.substring(0,c),k,[o,c],u+h)),i="",l=0,u=null}else if(0!=r||a){if(!h)throw new TokenError("EOF in multi-line statement",n,f[0],[f,d]);a=0}else{if(!h)break;for(var y=0;C<E;){if(" "==h[C])y+=1;else if("\t"==h[C])y=Math.floor(y/tabsize+1)*tabsize;else{if("\f"!=h[C])break;y=0}C+=1}if(C==E)break;if(contains("#\r\n",h[C])){if("#"==h[C]){var T=rstrip(h.substring(C),"\r\n");e(new TokenInfo(tokens.T_COMMENT,T,[o,C],[o,C+T.length],h)),C+=T.length}e(new TokenInfo(tokens.T_NL,h.substring(C),[o,C],[o,h.length],h));continue}for(y>_[_.length-1]&&(_.push(y),e(new TokenInfo(tokens.T_INDENT,h.substring(C),[o,0],[o,C],h)));y<_[_.length-1];){if(!contains(_,y))throw new IndentationError("unindent does not match any outer indentation level",n,f[0],[f,d]);_=_.slice(0,-1),e(new TokenInfo(tokens.T_DEDENT,"",[o,C],[o,C],h))}}for(;C<E;){for(S=h.charAt(C);" "===S||"\f"===S||"\t"===S;)C+=1,S=h.charAt(C);if(p=PseudoTokenRegex.exec(h.substring(C))){var I=C;if(f=[o,I],d=[o,c=I+p[1].length],C=c,I==c)continue;var D=h.substring(I,c),H=h[I];if(contains("0123456789",H)||"."==H&&"."!=D&&"..."!=D)e(new TokenInfo(tokens.T_NUMBER,D,f,d,h));else if(contains("\r\n",H))e(new TokenInfo(r>0?tokens.T_NL:tokens.T_NEWLINE,D,f,d,h));else if("#"==H)e(new TokenInfo(tokens.T_COMMENT,D,f,d,h));else if(contains(triple_quoted,D)){if(!(L=(A=endpats[D]).exec(h.substring(C)))){k=[o,I],i=h.substring(I),u=h;break}C=L[0].length+C,D=h.substring(I,C),e(new TokenInfo(tokens.T_STRING,D,f,[o,C],h))}else if(contains(single_quoted,H)||contains(single_quoted,D.substring(0,2))||contains(single_quoted,D.substring(0,3))){if("\n"==D[D.length-1]){k=[o,I],A=endpats[H]||endpats[D[1]]||endpats[D[2]],i=h.substring(I),l=1,u=h;break}e(new TokenInfo(tokens.T_STRING,D,f,d,h))}else isidentifier(H)?e(new TokenInfo(tokens.T_NAME,D,f,d,h)):"\\"==H?a=1:(contains("([{",H)?r+=1:contains(")]}",H)&&(r-=1),e(new TokenInfo(tokens.T_OP,D,f,d,h)))}else e(new TokenInfo(tokens.T_ERRORTOKEN,h[C],[o,C],[o,C+1],h)),C+=1}}for(var N in m&&!contains("\r\n",m[m.length-1])&&e(new TokenInfo(tokens.T_NEWLINE,"",[o-1,m.length],[o-1,m.length+1],"")),_.slice(1))e(new TokenInfo(tokens.T_DEDENT,"",[o,0],[o,0],""));e(new TokenInfo(tokens.T_ENDMARKER,"",[o,0],[o,0],""))}function Parser(t,s){return this.filename=t,this.grammar=s,this.comments={},this.p_flags=0,this}function findInDfa(t,s){for(var e=t.length;e--;)if(t[e][0]===s[0]&&t[e][1]===s[1])return!0;return!1}function makeParser(t,s){void 0===s&&(s="file_input");var e=new Parser(t,SkAst.ParseTables);return"file_input"===s?e.setup(SkAst.ParseTables.sym.file_input):SkAst.asserts.fail("todo;"),e}SkAst._setupTokenRegexes=_setupTokenRegexes,SkAst.exportSymbol("Sk._setupTokenRegexes",SkAst._setupTokenRegexes),SkAst._tokenize=_tokenize,SkAst.exportSymbol("Sk._tokenize",SkAst._tokenize),Parser.FUTURE_PRINT_FUNCTION="print_function",Parser.FUTURE_UNICODE_LITERALS="unicode_literals",Parser.FUTURE_DIVISION="division",Parser.FUTURE_ABSOLUTE_IMPORT="absolute_import",Parser.FUTURE_WITH_STATEMENT="with_statement",Parser.FUTURE_NESTED_SCOPES="nested_scopes",Parser.FUTURE_GENERATORS="generators",Parser.CO_FUTURE_PRINT_FUNCTION=65536,Parser.CO_FUTURE_UNICODE_LITERALS=131072,Parser.CO_FUTURE_DIVISON=8192,Parser.CO_FUTURE_ABSOLUTE_IMPORT=16384,Parser.CO_FUTURE_WITH_STATEMENT=32768,Parser.prototype.setup=function(t){var s,e;e={type:t=t||this.grammar.start,value:null,context:null,children:[]},s={dfa:this.grammar.dfas[t],state:0,node:e},this.stack=[s],this.used_names={},SkAst._setupTokenRegexes()},Parser.prototype.addcomment=function(t,s,e,n){s[1]!=n.search(/\S/)&&(s[1]=n.search(/\S/)),this.comments[s]=t},Parser.prototype.addtoken=function(t,s,e){var n,o,r,a,i,l,u,_,f,d=this.classify(t,s,e);t:for(;;){for(_=(f=this.stack[this.stack.length-1]).dfa[0],f.dfa[1],u=_[f.state],l=0;l<u.length;++l){if(i=u[l][0],a=u[l][1],r=this.grammar.labels[i][0],this.grammar.labels[i][1],d===i){for(SkAst.asserts.assert(r<256),this.shift(t,s,a,e),o=a;1===_[o].length&&0===_[o][0][0]&&_[o][0][1]===o;){if(this.pop(),0===this.stack.length)return!0;o=(f=this.stack[this.stack.length-1]).state,_=f.dfa[0],f.dfa[1]}return!1}if(r>=256&&this.grammar.dfas[r][1].hasOwnProperty(d)){this.push(r,this.grammar.dfas[r],a,e);continue t}}if(!findInDfa(u,[0,f.state]))throw n=e[0][0],new SkAst.builtin.SyntaxError("bad input",this.filename,n,e);if(this.pop(),0===this.stack.length)throw new SkAst.builtin.SyntaxError("too much input",this.filename)}},Parser.prototype.classify=function(t,s,e){var n;if(t===SkAst.token.tokens.T_NAME&&(this.used_names[s]=!0,n=this.grammar.keywords.hasOwnProperty(s)&&this.grammar.keywords[s],"print"===s&&(this.p_flags&Parser.CO_FUTURE_PRINT_FUNCTION||!0===SkAst.__future__.print_function)&&(n=!1),n))return n;if(!(n=this.grammar.tokens.hasOwnProperty(t)&&this.grammar.tokens[t])){var o="#"+t;for(var r in SkAst.token.tokens)if(SkAst.token.tokens[r]==t){o=r;break}throw new SkAst.builtin.SyntaxError("bad token "+o,this.filename,e[0][0],e)}return n},Parser.prototype.shift=function(t,s,e,n){var o=this.stack[this.stack.length-1].dfa,r=(this.stack[this.stack.length-1].state,this.stack[this.stack.length-1].node),a={type:t,value:s,lineno:n[0][0],col_offset:n[0][1],end_lineno:n[1][0],end_col_offset:n[1][1],children:null};a&&r.children.push(a),this.stack[this.stack.length-1]={dfa:o,state:e,node:r}},Parser.prototype.push=function(t,s,e,n){var o=this.stack[this.stack.length-1].dfa,r=this.stack[this.stack.length-1].node,a={type:t,value:null,lineno:n[0][0],col_offset:n[0][1],end_lineno:n[1][0],end_col_offset:n[1][1],children:[]};this.stack[this.stack.length-1]={dfa:o,state:e,node:r},this.stack.push({dfa:s,state:0,node:a})},Parser.prototype.pop=function(){var t=this.stack.pop().node;t&&(0!==this.stack.length?this.stack[this.stack.length-1].node.children.push(t):(this.rootnode=t,this.rootnode.used_names=this.used_names))},SkAst.parse=function(t,s){var e=SkAst.token.tokens.T_COMMENT,n=SkAst.token.tokens.T_NL,o=SkAst.token.tokens.T_OP,r=SkAst.token.tokens.T_ENDMARKER,a=SkAst.token.tokens.T_ENCODING,i=!1,l=makeParser(t);if(SkAst._tokenize(function(t){var s=t.split("\n").reverse();return function(){if(0===s.length)throw new SkAst.builtin.Exception("EOF");return s.pop()+"\n"}}(s),"utf-8",(function(t){t.start[0],t.start[1];var s=null;t.type===e||t.type===n||t.type===a?(t.value,t.end[0],t.end[1],t.string[t.string.length-1],t.type===e&&l.addcomment(t.string,t.start,t.end,t.line)):(t.type===o&&(s=SkAst.OpMap[t.string]),l.addtoken(s||t.type,t.string,[t.start,t.end,t.line]),t.type===r&&(i=!0))}),t),!i)throw new SkAst.builtin.SyntaxError("incomplete input",this.filename);return{cst:l.rootnode,flags:l.p_flags,comments:l.comments}},SkAst.parseTreeDump=function(t,s){var e,n;if(n="",n+=s=s||"",t.type>=256)for(n+=SkAst.ParseTables.number2symbol[t.type]+"\n",e=0;e<t.children.length;++e)n+=SkAst.parseTreeDump(t.children[e],s+"  ");else n+=SkAst.token.tok_name[t.type]+": "+new SkAst.builtin.str(t.value).$r().v+"\n";return n},SkAst.exportSymbol("Sk.Parser",Parser),SkAst.exportSymbol("Sk.parse",SkAst.parse),SkAst.exportSymbol("Sk.parseTreeDump",SkAst.parseTreeDump);var SYM=SkAst.ParseTables.sym,TOK=SkAst.token.tokens,COMP_GENEXP=0,COMP_LISTCOMP=1,COMP_SETCOMP=2,NULL=null,_slice_kind={Slice_kind:1,ExtSlice_kind:2,Index_kind:3},_expr_kind={BoolOp_kind:1,NamedExpr_kind:2,BinOp_kind:3,UnaryOp_kind:4,Lambda_kind:5,IfExp_kind:6,Dict_kind:7,Set_kind:8,ListComp_kind:9,SetComp_kind:10,DictComp_kind:11,GeneratorExp_kind:12,Await_kind:13,Yield_kind:14,YieldFrom_kind:15,Compare_kind:16,Call_kind:17,FormattedValue_kind:18,JoinedStr_kind:19,Constant_kind:20,Attribute_kind:21,Subscript_kind:22,Starred_kind:23,Name_kind:24,List_kind:25,Tuple_kind:26};function Compiling(t,s,e){this.c_encoding=t,this.c_filename=s,this.c_flags=e||0}function NCH(t){return SkAst.asserts.assert(void 0!==t,"node must be defined"),null===t.children?0:t.children.length}function CHILD(t,s){return SkAst.asserts.assert(void 0!==t,"node must be defined"),SkAst.asserts.assert(void 0!==s,"index of child must be specified"),t.children[s]}function REQ(t,s){SkAst.asserts.assert(t.type===s,"node wasn't expected type")}function TYPE(t){return t.type}function LINENO(t){return t.lineno}function STR(t){return t.value}function ast_error(t,s,e){throw new SkAst.builtin.SyntaxError(e,t.c_filename,s.lineno)}function strobj(t){return SkAst.asserts.assert("string"==typeof t,"expecting string, got "+_typeof(t)),new SkAst.builtin.str(t)}function numStmts(t){var s,e,n;switch(t.type){case SYM.single_input:return CHILD(t,0).type===TOK.T_NEWLINE?0:numStmts(CHILD(t,0));case SYM.file_input:for(n=0,e=0;e<NCH(t);++e)(s=CHILD(t,e)).type===SYM.stmt&&(n+=numStmts(s));return n;case SYM.stmt:return numStmts(CHILD(t,0));case SYM.compound_stmt:return 1;case SYM.simple_stmt:return Math.floor(NCH(t)/2);case SYM.suite:if(1===NCH(t))return numStmts(CHILD(t,0));for(n=0,e=2;e<NCH(t)-1;++e)n+=numStmts(CHILD(t,e));return n;default:SkAst.asserts.fail("Non-statement found")}return 0}function forbiddenCheck(t,s,e,n){if(e instanceof SkAst.builtin.str&&(e=e.v),"None"===e)throw new SkAst.builtin.SyntaxError("assignment to None",t.c_filename,n);if("True"===e||"False"===e)throw new SkAst.builtin.SyntaxError("assignment to True or False is forbidden",t.c_filename,n)}function setContext(t,s,e,n){var o,r,a;switch(SkAst.asserts.assert(e!==SkAst.astnodes.AugStore&&e!==SkAst.astnodes.AugLoad,"context not AugStore or AugLoad"),a=null,r=null,s.constructor){case SkAst.astnodes.Attribute:case SkAst.astnodes.Name:e===SkAst.astnodes.Store&&forbiddenCheck(t,n,s.attr,n.lineno),s.ctx=e;break;case SkAst.astnodes.Subscript:s.ctx=e;break;case SkAst.astnodes.List:s.ctx=e,a=s.elts;break;case SkAst.astnodes.Tuple:if(0===s.elts.length)throw new SkAst.builtin.SyntaxError("can't assign to ()",t.c_filename,n.lineno);s.ctx=e,a=s.elts;break;case SkAst.astnodes.Lambda:r="lambda";break;case SkAst.astnodes.Call:r="function call";break;case SkAst.astnodes.BoolOp:case SkAst.astnodes.BinOp:case SkAst.astnodes.UnaryOp:r="operator";break;case SkAst.astnodes.GeneratorExp:r="generator expression";break;case SkAst.astnodes.Yield:r="yield expression";break;case SkAst.astnodes.ListComp:r="list comprehension";break;case SkAst.astnodes.SetComp:r="set comprehension";break;case SkAst.astnodes.DictComp:r="dict comprehension";break;case SkAst.astnodes.Dict:case SkAst.astnodes.Set:case SkAst.astnodes.Num:case SkAst.astnodes.Str:r="literal";break;case SkAst.astnodes.NameConstant:r="True, False or None";break;case SkAst.astnodes.Compare:r="comparison";break;case SkAst.astnodes.Repr:r="repr";break;case SkAst.astnodes.IfExp:r="conditional expression";break;default:SkAst.asserts.fail("unhandled expression in assignment")}if(r)throw new SkAst.builtin.SyntaxError("can't "+(e===SkAst.astnodes.Store?"assign to":"delete")+" "+r,t.c_filename,n.lineno);if(a)for(o=0;o<a.length;++o)setContext(t,a[o],e,n)}var operatorMap={};function getOperator(t){if(void 0===operatorMap[t.type])throw new SkAst.builtin.SyntaxError("invalid syntax",t.type,t.lineno);return operatorMap[t.type]}function new_identifier(t,s){return t.value?SkAst.builtin.str(t.value):SkAst.builtin.str(t)}function astForCompOp(t,s){if(REQ(s,SYM.comp_op),1===NCH(s))switch((s=CHILD(s,0)).type){case TOK.T_LESS:return SkAst.astnodes.Lt;case TOK.T_GREATER:return SkAst.astnodes.Gt;case TOK.T_EQEQUAL:return SkAst.astnodes.Eq;case TOK.T_LESSEQUAL:return SkAst.astnodes.LtE;case TOK.T_GREATEREQUAL:return SkAst.astnodes.GtE;case TOK.T_NOTEQUAL:return SkAst.astnodes.NotEq;case TOK.T_NAME:if("in"===s.value)return SkAst.astnodes.In;if("is"===s.value)return SkAst.astnodes.Is}else if(2===NCH(s)&&CHILD(s,0).type===TOK.T_NAME){if("in"===CHILD(s,1).value)return SkAst.astnodes.NotIn;if("is"===CHILD(s,0).value)return SkAst.astnodes.IsNot}SkAst.asserts.fail("invalid comp_op")}function copy_location(t,s){return t&&(t.lineno=LINENO(s),t.col_offset=s.col_offset,t.end_lineno=s.end_lineno,t.end_col_offset=s.end_col_offset),t}function seq_for_testlist(t,s){var e,n=[];for(SkAst.asserts.assert(s.type===SYM.testlist||s.type===SYM.testlist_star_expr||s.type===SYM.listmaker||s.type===SYM.testlist_comp||s.type===SYM.testlist_safe||s.type===SYM.testlist1,"node type must be listlike"),e=0;e<NCH(s);e+=2)SkAst.asserts.assert(CHILD(s,e).type===SYM.test||CHILD(s,e).type===SYM.old_test||CHILD(s,e).type===SYM.star_expr),n[e/2]=ast_for_expr(t,CHILD(s,e));return n}function astForSuite(t,s){var e,n,o,r,a,i;if(REQ(s,SYM.suite),i=[],a=0,CHILD(s,0).type===SYM.simple_stmt)for(s=CHILD(s,0),CHILD(s,(o=NCH(s)-1)-1).type===TOK.T_SEMI&&(o-=1),n=0;n<o;n+=2)i[a++]=astForStmt(t,CHILD(s,n));else for(n=2;n<NCH(s)-1;++n)if(REQ(r=CHILD(s,n),SYM.stmt),1===numStmts(r))i[a++]=astForStmt(t,r);else for(REQ(r=CHILD(r,0),SYM.simple_stmt),e=0;e<NCH(r);e+=2){if(0===NCH(CHILD(r,e))){SkAst.asserts.assert(e+1===NCH(r));break}i[a++]=astForStmt(t,CHILD(r,e))}return SkAst.asserts.assert(a===numStmts(s)),i}function astForExceptClause(t,s,e){var n;return REQ(s,SYM.except_clause),REQ(e,SYM.suite),1===NCH(s)?new SkAst.astnodes.ExceptHandler(null,null,astForSuite(t,e),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):2===NCH(s)?new SkAst.astnodes.ExceptHandler(ast_for_expr(t,CHILD(s,1)),null,astForSuite(t,e),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):4===NCH(s)?(SkAst.__future__.python3&&","==CHILD(s,2).value&&ast_error(t,s,"Old-style 'except' clauses are not supported in Python 3"),ast_for_expr(t,CHILD(s,1)),setContext(t,n=ast_for_expr(t,CHILD(s,3)),SkAst.astnodes.Store,CHILD(s,3)),new SkAst.astnodes.ExceptHandler(ast_for_expr(t,CHILD(s,1)),n,astForSuite(t,e),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)):void SkAst.asserts.fail("wrong number of children for except clause")}function astForTryStmt(t,s){var e,n,o=[],r=NCH(s),a=(r-3)/3,i=[],l=null;if(REQ(s,SYM.try_stmt),n=astForSuite(t,CHILD(s,2)),CHILD(s,r-3).type===TOK.T_NAME)"finally"===CHILD(s,r-3).value?(r>=9&&CHILD(s,r-6).type===TOK.T_NAME&&(i=astForSuite(t,CHILD(s,r-4)),a--),l=astForSuite(t,CHILD(s,r-1)),a--):(i=astForSuite(t,CHILD(s,r-1)),a--);else if(CHILD(s,r-3).type!==SYM.except_clause)throw new SkAst.builtin.SyntaxError("malformed 'try' statement",t.c_filename,s.lineno);if(a>0)for(e=0;e<a;e++)o[e]=astForExceptClause(t,CHILD(s,3+3*e),CHILD(s,5+3*e));return SkAst.asserts.assert(!!l||0!=o.length),new SkAst.astnodes.Try(n,o,i,l,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function astForDottedName(t,s){var e,n,o,r,a;for(REQ(s,SYM.dotted_name),a=s.lineno,r=s.col_offset,o=strobj(CHILD(s,0).value),n=new SkAst.astnodes.Name(o,SkAst.astnodes.Load,a,r,s.end_lineno,s.end_col_offset),e=2;e<NCH(s);e+=2)o=strobj(CHILD(s,e).value),n=new SkAst.astnodes.Attribute(n,o,SkAst.astnodes.Load,a,r,s.end_lineno,s.end_col_offset);return n}function astForDecorator(t,s){var e;return REQ(s,SYM.decorator),REQ(CHILD(s,0),TOK.T_AT),REQ(CHILD(s,NCH(s)-1),TOK.T_NEWLINE),e=astForDottedName(t,CHILD(s,1)),3===NCH(s)?e:5===NCH(s)?new SkAst.astnodes.Call(e,[],[],null,null,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):ast_for_call(t,CHILD(s,3),e)}function astForDecorators(t,s){var e,n;for(REQ(s,SYM.decorators),n=[],e=0;e<NCH(s);++e)n[e]=astForDecorator(t,CHILD(s,e));return n}function ast_for_decorated(t,s){var e,n=null;return REQ(s,SYM.decorated),e=astForDecorators(t,CHILD(s,0)),SkAst.asserts.assert(TYPE(CHILD(s,1))==SYM.funcdef||TYPE(CHILD(s,1))==SYM.async_funcdef||TYPE(CHILD(s,1))==SYM.classdef),TYPE(CHILD(s,1))==SYM.funcdef?n=ast_for_funcdef(t,CHILD(s,1),e):TYPE(CHILD(s,1))==SYM.classdef?n=astForClassdef(t,CHILD(s,1),e):TYPE(CHILD(s,1))==SYM.async_funcdef&&(n=ast_for_async_funcdef(t,CHILD(s,1),e)),n&&(n.lineno=LINENO(s),n.col_offset=s.col_offset),n}function ast_for_with_item(t,s){var e,n;return REQ(s,SYM.with_item),e=ast_for_expr(t,CHILD(s,0)),3==NCH(s)&&setContext(t,n=ast_for_expr(t,CHILD(s,2)),SkAst.astnodes.Store,s),new SkAst.astnodes.withitem(e,n)}function ast_for_with_stmt(t,s,e){var n,o,r=e?CHILD(s,1):s,a=[];for(REQ(r,SYM.with_stmt),n=1;n<NCH(r)-2;n+=2){var i=ast_for_with_item(t,CHILD(r,n));a[(n-1)/2]=i}return o=astForSuite(t,CHILD(r,NCH(r)-1)),e?new SkAst.astnodes.AsyncWith(a,o,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):new SkAst.astnodes.With(a,o,LINENO(r),r.col_offset,r.end_lineno,r.end_col_offset)}function astForExecStmt(t,s){var e,n=null,o=null,r=NCH(s);return SkAst.asserts.assert(2===r||4===r||6===r),REQ(s,SYM.exec_stmt),e=ast_for_expr(t,CHILD(s,1)),r>=4&&(n=ast_for_expr(t,CHILD(s,3))),6===r&&(o=ast_for_expr(t,CHILD(s,5))),new SkAst.astnodes.Exec(e,n,o,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function astForIfStmt(t,s){var e,n,o,r,a,i;if(REQ(s,SYM.if_stmt),4===NCH(s))return new SkAst.astnodes.If(ast_for_expr(t,CHILD(s,1)),astForSuite(t,CHILD(s,3)),[],s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);if("s"===(i=CHILD(s,4).value.charAt(2)))return new SkAst.astnodes.If(ast_for_expr(t,CHILD(s,1)),astForSuite(t,CHILD(s,3)),astForSuite(t,CHILD(s,6)),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);if("i"===i){for(r=!1,o=[],CHILD(s,1+(a=NCH(s)-4)).type===TOK.T_NAME&&"s"===CHILD(s,a+1).value.charAt(2)&&(r=!0,a-=3),a/=4,r&&(o=[new SkAst.astnodes.If(ast_for_expr(t,CHILD(s,NCH(s)-6)),astForSuite(t,CHILD(s,NCH(s)-4)),astForSuite(t,CHILD(s,NCH(s)-1)),CHILD(s,NCH(s)-6).lineno,CHILD(s,NCH(s)-6).col_offset,CHILD(s,NCH(s)-6).end_lineno,CHILD(s,NCH(s)-6).end_col_offset)],a--),n=0;n<a;++n)e=5+4*(a-n-1),o=[new SkAst.astnodes.If(ast_for_expr(t,CHILD(s,e)),astForSuite(t,CHILD(s,e+2)),o,CHILD(s,e).lineno,CHILD(s,e).col_offset,CHILD(s,NCH(s)-6).end_lineno,CHILD(s,NCH(s)-6).end_col_offset)];return new SkAst.astnodes.If(ast_for_expr(t,CHILD(s,1)),astForSuite(t,CHILD(s,3)),o,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}SkAst.asserts.fail("unexpected token in 'if' statement")}function ast_for_exprlist(t,s,e){var n,o,r;for(REQ(s,SYM.exprlist),r=[],o=0;o<NCH(s);o+=2)n=ast_for_expr(t,CHILD(s,o)),r[o/2]=n,e&&setContext(t,n,e,CHILD(s,o));return r}function astForDelStmt(t,s){return REQ(s,SYM.del_stmt),new SkAst.astnodes.Delete(ast_for_exprlist(t,CHILD(s,1),SkAst.astnodes.Del),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function astForGlobalStmt(t,s){var e,n=[];for(REQ(s,SYM.global_stmt),e=1;e<NCH(s);e+=2)n[(e-1)/2]=strobj(CHILD(s,e).value);return new SkAst.astnodes.Global(n,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function astForAssertStmt(t,s){return REQ(s,SYM.assert_stmt),2===NCH(s)?new SkAst.astnodes.Assert(ast_for_expr(t,CHILD(s,1)),null,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):4===NCH(s)?new SkAst.astnodes.Assert(ast_for_expr(t,CHILD(s,1)),ast_for_expr(t,CHILD(s,3)),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):void SkAst.asserts.fail("improper number of parts to assert stmt")}function aliasForImportName(t,s){var e,n,o,r;t:for(;;){switch(s.type){case SYM.import_as_name:return r=null,o=strobj(CHILD(s,0).value),3===NCH(s)&&(r=CHILD(s,2).value),new SkAst.astnodes.alias(o,null==r?null:strobj(r));case SYM.dotted_as_name:if(1===NCH(s)){s=CHILD(s,0);continue t}return n=aliasForImportName(t,CHILD(s,0)),SkAst.asserts.assert(!n.asname),n.asname=strobj(CHILD(s,2).value),n;case SYM.dotted_name:if(1===NCH(s))return new SkAst.astnodes.alias(strobj(CHILD(s,0).value),null);for(r="",e=0;e<NCH(s);e+=2)r+=CHILD(s,e).value+".";return new SkAst.astnodes.alias(strobj(r.substr(0,r.length-1)),null);case TOK.T_STAR:return new SkAst.astnodes.alias(strobj("*"),null);default:throw new SkAst.builtin.SyntaxError("unexpected import name",t.c_filename,s.lineno)}break}}function astForImportStmt(t,s){var e,n,o,r,a,i,l,u,_,f;if(REQ(s,SYM.import_stmt),u=s.lineno,l=s.col_offset,_=s.end_lineno,f=s.end_col_offset,(s=CHILD(s,0)).type===SYM.import_name){for(REQ(s=CHILD(s,1),SYM.dotted_as_names),i=[],a=0;a<NCH(s);a+=2)i[a/2]=aliasForImportName(t,CHILD(s,a));return new SkAst.astnodes.Import(i,u,l,_,f)}if(s.type===SYM.import_from){for(r=null,o=0,n=1;n<NCH(s);++n){if(CHILD(s,n).type===SYM.dotted_name){r=aliasForImportName(t,CHILD(s,n)),n++;break}if(CHILD(s,n).type===TOK.T_DOT)o++;else{if(CHILD(s,n).type!==TOK.T_ELLIPSIS)break;o+=3}}switch(CHILD(s,++n).type){case TOK.T_STAR:s=CHILD(s,n);break;case TOK.T_LPAR:NCH(s=CHILD(s,n+1));break;case SYM.import_as_names:if(NCH(s=CHILD(s,n))%2==0)throw new SkAst.builtin.SyntaxError("trailing comma not allowed without surrounding parentheses",t.c_filename,s.lineno);break;default:throw new SkAst.builtin.SyntaxError("Unexpected node-type in from-import",t.c_filename,s.lineno)}if(i=[],s.type===TOK.T_STAR)i[0]=aliasForImportName(t,s);else for(a=0;a<NCH(s);a+=2)i[a/2]=aliasForImportName(t,CHILD(s,a));return e=r?r.name.v:"",new SkAst.astnodes.ImportFrom(strobj(e),i,o,u,l,_,f)}throw new SkAst.builtin.SyntaxError("unknown import statement",t.c_filename,s.lineno)}function ast_for_testlistComp(t,s){return SkAst.asserts.assert(s.type===SYM.testlist_comp||s.type===SYM.argument),NCH(s)>1&&CHILD(s,1).type===SYM.comp_for?ast_for_gen_expr(t,s):ast_for_testlist(t,s)}function ast_for_genexp(t,s){return SkAst.asserts.assert(TYPE(s)==SYM.testlist_comp||TYPE(s)==SYM.argument),ast_for_itercomp(t,s,COMP_GENEXP)}function ast_for_listcomp(t,s){return SkAst.asserts.assert(TYPE(s)==SYM.testlist_comp),ast_for_itercomp(t,s,COMP_LISTCOMP)}function astForFactor(t,s){var e,n,o,r,a;if(CHILD(s,0).type===TOK.T_MINUS&&2===NCH(s)&&(a=CHILD(s,1)).type===SYM.factor&&1===NCH(a)&&(r=CHILD(a,0)).type===SYM.power&&1===NCH(r)&&(o=CHILD(r,0)).type===SYM.atom&&(n=CHILD(o,0)).type===TOK.T_NUMBER)return n.value="-"+n.value,ast_for_atom(t,o);switch(e=ast_for_expr(t,CHILD(s,1)),CHILD(s,0).type){case TOK.T_PLUS:return new SkAst.astnodes.UnaryOp(SkAst.astnodes.UAdd,e,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case TOK.T_MINUS:return new SkAst.astnodes.UnaryOp(SkAst.astnodes.USub,e,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case TOK.T_TILDE:return new SkAst.astnodes.UnaryOp(SkAst.astnodes.Invert,e,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}SkAst.asserts.fail("unhandled factor")}function astForForStmt(t,s){var e,n,o,r=[];return REQ(s,SYM.for_stmt),9===NCH(s)&&(r=astForSuite(t,CHILD(s,8))),n=ast_for_exprlist(t,o=CHILD(s,1),SkAst.astnodes.Store),e=1===NCH(o)?n[0]:new SkAst.astnodes.Tuple(n,SkAst.astnodes.Store,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset),new SkAst.astnodes.For(e,ast_for_testlist(t,CHILD(s,3)),astForSuite(t,CHILD(s,5)),r,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function ast_for_call(t,s,e,n){var o,r,a,i,l,u;for(REQ(s,SYM.arglist),r=0,a=0,o=0;o<NCH(s);o++){var _=CHILD(s,o);TYPE(_)==SYM.argument&&(1==NCH(_)?r++:TYPE(CHILD(_,1))==SYM.comp_for?(r++,n||ast_error(t,_,"invalid syntax"),NCH(s)>1&&ast_error(t,_,"Generator expression must be parenthesized")):TYPE(CHILD(_,0))==TOK.T_STAR?r++:a++)}for(l=[],u=[],r=0,a=0,i=0,o=0;o<NCH(s);o++)if(TYPE(_=CHILD(s,o))==SYM.argument){var f,d=CHILD(_,0);if(1==NCH(_)){if(a&&ast_error(t,d,i?"positional argument follows keyword argument unpacking":"positional argument follows keyword argument"),!(f=ast_for_expr(t,d)))return NULL;l[r++]=f}else if(TYPE(d)==TOK.T_STAR){var S;if(i)return ast_error(t,d,"iterable argument unpacking follows keyword argument unpacking"),NULL;if(!(f=ast_for_expr(t,CHILD(_,1))))return NULL;S=new SkAst.astnodes.Starred(f,SkAst.astnodes.Load,LINENO(d),d.col_offset,d.end_lineno,d.end_col_offset),l[r++]=S}else if(TYPE(d)==TOK.T_DOUBLESTAR){if(o++,!(f=ast_for_expr(t,CHILD(_,1))))return NULL;A=new SkAst.astnodes.keyword(NULL,f),u[a++]=A,i++}else if(TYPE(CHILD(_,1))==SYM.comp_for){if(!(f=ast_for_genexp(t,_)))return NULL;l[r++]=f}else{var A,k,c,p;if(!(f=ast_for_expr(t,d)))return NULL;if(f.constructor===SkAst.astnodes.Lambda)return ast_error(t,d,"lambda cannot contain assignment"),NULL;if(f.constructor!==SkAst.astnodes.Name)return ast_error(t,d,"keyword can't be an expression"),NULL;if(forbiddenCheck(t,f.id,_,1))return NULL;for(k=f.id,p=0;p<a;p++)if((c=u[p].arg)&&c===k)return ast_error(t,d,"keyword argument repeated"),NULL;if(!(f=ast_for_expr(t,CHILD(_,2))))return NULL;A=new SkAst.astnodes.keyword(k,f),u[a++]=A}}return new SkAst.astnodes.Call(e,l,u,e.lineno,e.col_offset,e.end_lineno,e.end_col_offset)}function ast_for_trailer(t,s,e){if(REQ(s,SYM.trailer),TYPE(CHILD(s,0))==TOK.T_LPAR)return 2==NCH(s)?new SkAst.astnodes.Call(e,NULL,NULL,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):ast_for_call(t,CHILD(s,1),e,!0);if(TYPE(CHILD(s,0))==TOK.T_DOT){var n=new_identifier(CHILD(s,1));return n?new SkAst.astnodes.Attribute(e,n,SkAst.astnodes.Load,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):NULL}if(REQ(CHILD(s,0),TOK.T_LSQB),REQ(CHILD(s,2),TOK.T_RSQB),1==NCH(s=CHILD(s,1)))return(r=astForSlice(t,CHILD(s,0)))?new SkAst.astnodes.Subscript(e,r,SkAst.astnodes.Load,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):NULL;var o,r,a,i,l=1,u=[];for(o=0;o<NCH(s);o+=2){if(!(r=astForSlice(t,CHILD(s,o))))return NULL;r.kind!=_slice_kind.Index_kind&&(l=0),u[o/2]=r}if(!l)return new SkAst.astnodes.Subscript(e,new SkAst.astnodes.ExtSlice(u),SkAst.astnodes.Load,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset);for(i=[],o=0;o<u.length;++o)r=u[o],SkAst.asserts.assert(r.kind==_slice_kind.Index_kind&&r.v.Index.value),i[o]=r.v.Index.value;return a=new SkAst.astnodes.Tuple(i,SkAst.astnodes.Load,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset),new SkAst.astnodes.Subscript(e,new SkAst.astnodes.Index(a),SkAst.astnodes.Load,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset)}function ast_for_flow_stmt(t,s){var e;switch(REQ(s,SYM.flow_stmt),TYPE(e=CHILD(s,0))){case SYM.break_stmt:return new SkAst.astnodes.Break(LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset);case SYM.continue_stmt:return new SkAst.astnodes.Continue(LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset);case SYM.yield_stmt:var n=ast_for_expr(t,CHILD(e,0));return n?new SkAst.astnodes.Expr(n,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):null;case SYM.return_stmt:return 1==NCH(e)?new SkAst.astnodes.Return(null,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):(r=ast_for_testlist(t,CHILD(e,1)))?new SkAst.astnodes.Return(r,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):null;case SYM.raise_stmt:if(1==NCH(e))return new SkAst.astnodes.Raise(null,null,null,null,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset);if(NCH(e)>=2){var o=null,r=ast_for_expr(t,CHILD(e,1)),a=null,i=null;return 4==NCH(e)&&"from"==CHILD(e,2).value?(SkAst.__future__.python3||ast_error(t,CHILD(e,2),"raise ... from ... is not available in Python 2"),o=ast_for_expr(t,CHILD(e,3))):NCH(e)>=4&&","==CHILD(e,2).value&&(SkAst.__future__.python3&&ast_error(t,s,"Old raise syntax is not available in Python 3"),a=ast_for_expr(t,CHILD(e,3)),6==NCH(e)&&(i=ast_for_expr(t,CHILD(e,5)))),new SkAst.astnodes.Raise(r,o,a,i,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset)}default:return SkAst.asserts.fail("unexpected flow_stmt: ",TYPE(e)),null}}function astForArg(t,s){var e,n,o=null;return SkAst.asserts.assert(s.type===SYM.tfpdef||s.type===SYM.vfpdef),forbiddenCheck(t,n=CHILD(s,0),n.value,n.lineno),e=strobj(n.value),3==NCH(s)&&CHILD(s,1).type===TOK.T_COLON&&(o=ast_for_expr(t,CHILD(s,2))),new SkAst.astnodes.arg(e,o,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function handleKeywordonlyArgs(t,s,e,n,o){var r,a,i,l=e,u=0;for(n||ast_error(t,CHILD(s,e),"named arguments must follow bare *"),SkAst.asserts.assert(o);l<NCH(s);)switch((a=CHILD(s,l)).type){case SYM.vfpdef:case SYM.tfpdef:l+1<NCH(s)&&CHILD(s,l+1).type==TOK.T_EQUAL?(o[u]=ast_for_expr(t,CHILD(s,l+2)),l+=2):o[u]=null,i=3==NCH(a)?ast_for_expr(t,CHILD(a,2)):null,forbiddenCheck(t,a=CHILD(a,0),a.value,a.lineno),r=strobj(a.value),n[u++]=new SkAst.astnodes.arg(r,i,a.lineno,a.col_offset,a.end_lineno,a.end_col_offset),l+=2;break;case TOK.T_DOUBLESTAR:return l;default:ast_error(t,a,"unexpected node")}return l}function astForArguments(t,s){var e,n,o,r,a=[],i=[],l=[],u=[],_=null,f=null,d=null;if(s.type===SYM.parameters){if(2===NCH(s))return new SkAst.astnodes.arguments_([],null,[],[],null,[]);s=CHILD(s,1)}for(SkAst.asserts.assert(s.type===SYM.varargslist||s.type===SYM.typedargslist),o=0,n=0,e=0;o<NCH(s);)switch((d=CHILD(s,o)).type){case SYM.tfpdef:case SYM.vfpdef:if(o+1<NCH(s)&&CHILD(s,o+1).type==TOK.T_EQUAL)i[n++]=ast_for_expr(t,CHILD(s,o+2)),o+=2,r=1;else if(r)throw new SkAst.builtin.SyntaxError("non-default argument follows default argument",t.c_filename,s.lineno);a[e++]=astForArg(t,d),o+=2;break;case TOK.T_STAR:if(o+1>=NCH(s)||o+2==NCH(s)&&CHILD(s,o+1).type==TOK.T_COMMA)throw new SkAst.builtin.SyntaxError("named arguments must follow bare *",t.c_filename,s.lineno);(d=CHILD(s,o+1)).type==TOK.T_COMMA?o=handleKeywordonlyArgs(t,s,o+=2,l,u):(_=astForArg(t,d),(o+=3)<NCH(s)&&(CHILD(s,o).type==SYM.tfpdef||CHILD(s,o).type==SYM.vfpdef)&&(o=handleKeywordonlyArgs(t,s,o,l,u)));break;case TOK.T_DOUBLESTAR:d=CHILD(s,o+1),SkAst.asserts.assert(d.type==SYM.tfpdef||d.type==SYM.vfpdef),f=astForArg(t,d),o+=3;break;default:return void SkAst.asserts.fail("unexpected node in varargslist")}return new SkAst.astnodes.arguments_(a,_,l,u,f,i)}function ast_for_async_funcdef(t,s,e){return REQ(s,SYM.async_funcdef),REQ(CHILD(s,0),TOK.T_NAME),SkAst.asserts.assert(STR("async"===CHILD(s,0))),REQ(CHILD(s,1),SYM.funcdef),ast_for_funcdef_impl(t,s,e,!0)}function ast_for_funcdef(t,s,e){return ast_for_funcdef_impl(t,s,e,!1)}function ast_for_funcdef_impl(t,s,e,n){var o,r,a,i,l=n?CHILD(s,1):s,u=NULL,_=1,f=NULL;if(n&&t.c_feature_version<5)return ast_error(t,l,"Async functions are only supported in Python 3.5 and greater"),NULL;if(REQ(l,SYM.funcdef),forbiddenCheck(t,o=new_identifier(CHILD(l,_)),CHILD(l,_),0))return NULL;if(!(r=astForArguments(t,CHILD(l,_+1))))return NULL;if(TYPE(CHILD(l,_+2))==TOK.T_RARROW){if(!(u=ast_for_expr(t,CHILD(l,_+3))))return NULL;_+=2}if(TYPE(CHILD(l,_+3))==TOK.T_TYPE_COMMENT){if(!(f=TOK.T_NEW_TYPE_COMMENT(CHILD(l,_+3))))return NULL;_+=1}if(!(a=astForSuite(t,CHILD(l,_+3))))return NULL;if(NCH(CHILD(l,_+3))>1&&TYPE(i=CHILD(CHILD(l,_+3),1))==TOK.T_TYPE_COMMENT){if(f!=NULL)return ast_error(t,l,"Cannot have two type comments on def"),NULL;if(!(f=TOK.T_NEW_TYPE_COMMENT(i)))return NULL}return n?new SkAst.astnodes.AsyncFunctionDef(o,r,a,e,u,f,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):new SkAst.astnodes.FunctionDef(o,r,a,e,u,f,LINENO(l),l.col_offset,l.end_lineno,l.end_col_offset)}function astForClassBases(t,s){return SkAst.asserts.assert(NCH(s)>0),REQ(s,SYM.testlist),1===NCH(s)?[ast_for_expr(t,CHILD(s,0))]:seq_for_testlist(t,s)}function astForClassdef(t,s,e){var n,o,r,a,i;return REQ(s,SYM.classdef),4==NCH(s)?(r=astForSuite(t,CHILD(s,3)),n=new_identifier(CHILD(s,1).value),forbiddenCheck(t,CHILD(s,3),n,s.lineno),new SkAst.astnodes.ClassDef(n,[],[],r,e,null,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset)):TYPE(CHILD(s,3))===TOK.T_RPAR?(r=astForSuite(t,CHILD(s,5)),n=new_identifier(CHILD(s,1).value),forbiddenCheck(t,CHILD(s,3),n,CHILD(s,3).lineno),new SkAst.astnodes.ClassDef(n,[],[],r,e,null,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset)):(a=new_identifier(CHILD(s,1)),i=new SkAst.astnodes.Name(a,SkAst.astnodes.Load,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset),o=ast_for_call(t,CHILD(s,3),i,!1),r=astForSuite(t,CHILD(s,6)),n=new_identifier(CHILD(s,1).value),forbiddenCheck(t,CHILD(s,1),n,CHILD(s,1).lineno),new SkAst.astnodes.ClassDef(n,o.args,o.keywords,r,e,null,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset))}function astForLambdef(t,s){var e,n;return 3===NCH(s)?(e=new SkAst.astnodes.arguments_([],null,null,[]),n=ast_for_expr(t,CHILD(s,2))):(e=astForArguments(t,CHILD(s,1)),n=ast_for_expr(t,CHILD(s,3))),new SkAst.astnodes.Lambda(e,n,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function astForComprehension(t,s){var e,n,o,r,a,i,l,u,_,f;function d(t,s){for(var e=0;;){if(REQ(s,SYM.comp_iter),CHILD(s,0).type===SYM.comp_for)return e;if(REQ(s=CHILD(s,0),SYM.comp_if),e++,2===NCH(s))return e;s=CHILD(s,2)}}for(u=function(t,s){var e=0;t:for(;;){if(e++,REQ(s,SYM.comp_for),5!==NCH(s))return e;s=CHILD(s,4);s:for(;;){if(REQ(s,SYM.comp_iter),(s=CHILD(s,0)).type===SYM.comp_for)continue t;if(s.type===SYM.comp_if){if(3===NCH(s)){s=CHILD(s,2);continue s}return e}break}break}SkAst.asserts.fail("logic error in countCompFors")}(0,s),_=[],l=0;l<u;++l){if(REQ(s,SYM.comp_for),a=ast_for_exprlist(t,i=CHILD(s,1),SkAst.astnodes.Store),r=ast_for_expr(t,CHILD(s,3)),f=1===NCH(i)?new SkAst.astnodes.comprehension(a[0],r,[]):new SkAst.astnodes.comprehension(new SkAst.astnodes.Tuple(a,SkAst.astnodes.Store,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset),r,[]),5===NCH(s)){for(o=d(0,s=CHILD(s,4)),n=[],e=0;e<o;++e)REQ(s,SYM.comp_iter),REQ(s=CHILD(s,0),SYM.comp_if),r=ast_for_expr(t,CHILD(s,1)),n[e]=r,3===NCH(s)&&(s=CHILD(s,2));s.type===SYM.comp_iter&&(s=CHILD(s,0)),f.ifs=n}_[l]=f}return _}function astForIterComp(t,s,e){var n,o;return SkAst.asserts.assert(NCH(s)>1),n=ast_for_expr(t,CHILD(s,0)),o=astForComprehension(t,CHILD(s,1)),e===COMP_GENEXP?new SkAst.astnodes.GeneratorExp(n,o,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):e===COMP_SETCOMP?new SkAst.astnodes.SetComp(n,o,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):void 0}function count_comp_fors(t,s){var e,n=0;t:for(;;){if(e=0,n++,REQ(s,SYM.comp_for),TYPE(CHILD(s,0))==TOK.T_ASYNC&&(e=1),NCH(s)!=5+e)return n;s=CHILD(s,4+e);s:for(;;){if(REQ(s,SYM.comp_iter),TYPE(s=CHILD(s,0))===SYM.comp_for)continue t;if(TYPE(s)===SYM.comp_if){if(3===NCH(s)){s=CHILD(s,2);continue s}return n}break}break}}function count_comp_ifs(t,s){for(var e=0;;){if(REQ(s,SYM.comp_iter),TYPE(CHILD(s,0))==SYM.comp_for)return e;if(REQ(s=CHILD(s,0),SYM.comp_if),e++,2==NCH(s))return e;s=CHILD(s,2)}}function ast_for_comprehension(t,s){var e,n,o=[];for(n=count_comp_fors(t,s),e=0;e<n;e++){var r,a,i,l,u,_=0;if(TYPE(CHILD(s,0))==TOK.T_ASYNC&&(_=1),!(a=ast_for_exprlist(t,u=CHILD(s,1+_),SkAst.astnodes.Store)))return null;if(!(i=ast_for_expr(t,CHILD(s,3+_))))return null;if(l=a[0],r=1==NCH(u)?new SkAst.astnodes.comprehension(l,i,null,_):new SkAst.astnodes.comprehension(new SkAst.astnodes.Tuple(a,SkAst.astnodes.Store,l.lineno,l.col_offset,u.end_lineno,u.end_col_offset),i,null,_),NCH(s)==5+_){var f,d,S=[];if(-1==(d=count_comp_ifs(t,s=CHILD(s,4+_))))return null;for(f=0;f<d;f++){if(REQ(s,SYM.comp_iter),REQ(s=CHILD(s,0),SYM.comp_if),!(i=ast_for_expr(t,CHILD(s,1))))return null;S[f]=i,3==NCH(s)&&(s=CHILD(s,2))}TYPE(s)==SYM.comp_iter&&(s=CHILD(s,0)),r.ifs=S}o[e]=r}return o}function ast_for_itercomp(t,s,e){var n,o,r;return SkAst.asserts.assert(NCH(s)>1),(n=ast_for_expr(t,r=CHILD(s,0))).constructor===SkAst.astnodes.Starred?(ast_error(t,r,"iterable unpacking cannot be used in comprehension"),NULL):(o=ast_for_comprehension(t,CHILD(s,1)),e==COMP_GENEXP?new SkAst.astnodes.GeneratorExp(n,o,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):e==COMP_LISTCOMP?new SkAst.astnodes.ListComp(n,o,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):e==COMP_SETCOMP?new SkAst.astnodes.SetComp(n,o,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):null)}function ast_for_dictelement(t,s,e){var n;if(TYPE(CHILD(s,e))==TOK.T_DOUBLESTAR)return SkAst.asserts.assert(NCH(s)-e>=2),{key:null,value:n=ast_for_expr(t,CHILD(s,e+1)),i:e+2};if(SkAst.asserts.assert(NCH(s)-e>=3),!(n=ast_for_expr(t,CHILD(s,e))))return 0;var o=n;return REQ(CHILD(s,e+1),TOK.T_COLON),!!(n=ast_for_expr(t,CHILD(s,e+2)))&&{key:o,value:n,i:e+3}}function ast_for_dictcomp(t,s){var e,n,o;return SkAst.asserts.assert(NCH(s)>3),REQ(CHILD(s,1),TOK.T_COLON),e=ast_for_expr(t,CHILD(s,0)),n=ast_for_expr(t,CHILD(s,2)),o=astForComprehension(t,CHILD(s,3)),new SkAst.astnodes.DictComp(e,n,o,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function ast_for_dictdisplay(t,s){var e,n,o=[],r=[];for(n=0,e=0;e<NCH(s);e++){var a=ast_for_dictelement(t,s,e);e=a.i,o[n]=a.key,r[n]=a.value,n++}return new SkAst.astnodes.Dict(o,r,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset)}function ast_for_gen_expr(t,s){return SkAst.asserts.assert(s.type===SYM.testlist_comp||s.type===SYM.argument),astForIterComp(t,s,COMP_GENEXP)}function ast_for_setcomp(t,s){return SkAst.asserts.assert(s.type===SYM.dictorsetmaker),astForIterComp(t,s,COMP_SETCOMP)}function astForWhileStmt(t,s){return REQ(s,SYM.while_stmt),4===NCH(s)?new SkAst.astnodes.While(ast_for_expr(t,CHILD(s,1)),astForSuite(t,CHILD(s,3)),[],s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):7===NCH(s)?new SkAst.astnodes.While(ast_for_expr(t,CHILD(s,1)),astForSuite(t,CHILD(s,3)),astForSuite(t,CHILD(s,6)),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):void SkAst.asserts.fail("wrong number of tokens for 'while' stmt")}function astForAugassign(t,s){switch(REQ(s,SYM.augassign),(s=CHILD(s,0)).value.charAt(0)){case"+":return SkAst.astnodes.Add;case"-":return SkAst.astnodes.Sub;case"/":return"/"===s.value.charAt(1)?SkAst.astnodes.FloorDiv:SkAst.astnodes.Div;case"%":return SkAst.astnodes.Mod;case"<":return SkAst.astnodes.LShift;case">":return SkAst.astnodes.RShift;case"&":return SkAst.astnodes.BitAnd;case"^":return SkAst.astnodes.BitXor;case"|":return SkAst.astnodes.BitOr;case"*":return"*"===s.value.charAt(1)?SkAst.astnodes.Pow:SkAst.astnodes.Mult;case"@":if(SkAst.__future__.python3)return SkAst.astnodes.MatMult;default:SkAst.asserts.fail("invalid augassign")}}function astForBinop(t,s){var e,n,o,r,a=new SkAst.astnodes.BinOp(ast_for_expr(t,CHILD(s,0)),getOperator(CHILD(s,1)),ast_for_expr(t,CHILD(s,2)),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset),i=(NCH(s)-1)/2;for(r=1;r<i;++r)n=getOperator(o=CHILD(s,2*r+1)),e=ast_for_expr(t,CHILD(s,2*r+2)),a=new SkAst.astnodes.BinOp(a,n,e,o.lineno,o.col_offset,o.end_lineno,o.end_col_offset);return a}function ast_for_testlist(t,s){return SkAst.asserts.assert(NCH(s)>0),s.type===SYM.testlist_comp?NCH(s)>1&&SkAst.asserts.assert(CHILD(s,1).type!==SYM.comp_for):SkAst.asserts.assert(s.type===SYM.testlist||s.type===SYM.testlist_star_expr),1===NCH(s)?ast_for_expr(t,CHILD(s,0)):new SkAst.astnodes.Tuple(seq_for_testlist(t,s),SkAst.astnodes.Load,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function ast_for_exprStmt(t,s){var e,n,o,r,a,i,l,u,_,f,d,S;if(REQ(s,SYM.expr_stmt),1===NCH(s))return new SkAst.astnodes.Expr(ast_for_testlist(t,CHILD(s,0)),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);if(CHILD(s,1).type===SYM.augassign){switch(setContext(t,l=ast_for_testlist(t,u=CHILD(s,0)),SkAst.astnodes.Store,u),l.constructor){case SkAst.astnodes.Name:forbiddenCheck(t,u,l.id,s.lineno);break;case SkAst.astnodes.Attribute:case SkAst.astnodes.Subscript:break;case SkAst.astnodes.GeneratorExp:throw new SkAst.builtin.SyntaxError("augmented assignment to generator expression not possible",t.c_filename,s.lineno);case SkAst.astnodes.Yield:throw new SkAst.builtin.SyntaxError("augmented assignment to yield expression not possible",t.c_filename,s.lineno);default:throw new SkAst.builtin.SyntaxError("illegal expression for augmented assignment",t.c_filename,s.lineno)}return i=(u=CHILD(s,2)).type===SYM.testlist?ast_for_testlist(t,u):ast_for_expr(t,u),new SkAst.astnodes.AugAssign(l,astForAugassign(t,CHILD(s,1)),i,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}if(CHILD(s,1).type===SYM.annassign){if(!SkAst.__future__.python3)throw new SkAst.builtin.SyntaxError("Annotated assignment is not supported in Python 2",t.c_filename,s.lineno);for(u=CHILD(s,0),f=CHILD(s,1),d=1,_=u;1==NCH(_);)_=CHILD(_,0);switch(NCH(_)>0&&TYPE(CHILD(_,0))==TOK.T_LPAR&&(d=0),(l=ast_for_testlist(t,u)).constructor){case SkAst.astnodes.Name:forbiddenCheck(t,u,l.id,s.lineno),setContext(t,l,SkAst.astnodes.Store,u);break;case SkAst.astnodes.Attribute:forbiddenCheck(t,u,l.attr,s.lineno),setContext(t,l,SkAst.astnodes.Store,u);break;case SkAst.astnodes.Subscript:setContext(t,l,SkAst.astnodes.Store,u);break;case SkAst.astnodes.List:throw new SkAst.builtin.SyntaxError("only single target (not list) can be annotated",t.c_filename,s.lineno);case SkAst.astnodes.Tuple:throw new SkAst.builtin.SyntaxError("only single target (not tuple) can be annotated",t.c_filename,s.lineno);default:throw new SkAst.builtin.SyntaxError("illegal target for annotation",t.c_filename,s.lineno)}return l.constructor!=SkAst.astnodes.Name&&(d=0),i=ast_for_expr(t,u=CHILD(f,1)),2==NCH(f)?new SkAst.astnodes.AnnAssign(l,i,null,d,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):(S=ast_for_expr(t,u=CHILD(f,3)),new SkAst.astnodes.AnnAssign(l,i,S,d,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset))}for(REQ(CHILD(s,1),TOK.T_EQUAL),a=[],r=0;r<NCH(s)-2;r+=2){if((u=CHILD(s,r)).type===SYM.yield_expr)throw new SkAst.builtin.SyntaxError("assignment to yield expression not possible",t.c_filename,s.lineno);setContext(t,o=ast_for_testlist(t,u),SkAst.astnodes.Store,CHILD(s,r)),a[r/2]=o}return e=(n=CHILD(s,NCH(s)-1)).type===SYM.testlist_star_expr?ast_for_testlist(t,n):ast_for_expr(t,n),new SkAst.astnodes.Assign(a,e,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function astForIfexpr(t,s){return SkAst.asserts.assert(5===NCH(s)),new SkAst.astnodes.IfExp(ast_for_expr(t,CHILD(s,2)),ast_for_expr(t,CHILD(s,0)),ast_for_expr(t,CHILD(s,4)),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function parsestr(t,s){var e=function(t){return unescape(encodeURIComponent(t))},n=function(t){return decodeURIComponent(escape(t))},o=s.charAt(0),r=!1,a=!1;return(t.c_flags&SkAst.Parser.CO_FUTURE_UNICODE_LITERALS||!0===SkAst.__future__.unicode_literals)&&(a=!0),"u"===o||"U"===o?(o=(s=s.substr(1)).charAt(0),a=!0):"r"!==o&&"R"!==o||(o=(s=s.substr(1)).charAt(0),r=!0),SkAst.asserts.assert("b"!==o&&"B"!==o,"todo; haven't done b'' strings yet"),SkAst.asserts.assert("'"===o||'"'===o&&s.charAt(s.length-1)===o),s=s.substr(1,s.length-2),a&&(s=e(s)),s.length>=4&&s.charAt(0)===o&&s.charAt(1)===o&&(SkAst.asserts.assert(s.charAt(s.length-1)===o&&s.charAt(s.length-2)===o),s=s.substr(2,s.length-4)),r||-1===s.indexOf("\\")?strobj(n(s)):strobj(function(t,s){var o,r,a,i,l,u,_=t.length,f="";for(u=0;u<_;++u)"\\"===(l=t.charAt(u))?(++u,"n"===(l=t.charAt(u))?f+="\n":"\\"===l?f+="\\":"t"===l?f+="\t":"r"===l?f+="\r":"b"===l?f+="\b":"f"===l?f+="\f":"v"===l?f+="\v":"0"===l?f+="\0":'"'===l?f+='"':"'"===l?f+="'":"\n"===l||("x"===l?(i=t.charAt(++u),a=t.charAt(++u),f+=e(String.fromCharCode(parseInt(i+a,16)))):"u"===l||"U"===l?(i=t.charAt(++u),a=t.charAt(++u),r=t.charAt(++u),o=t.charAt(++u),f+=e(String.fromCharCode(parseInt(i+a,16),parseInt(r+o,16)))):f+="\\"+l)):f+=l;return n(f)}(s))}function parsestrplus(t,s){var e,n;for(REQ(CHILD(s,0),TOK.T_STRING),n=new SkAst.builtin.str(""),e=0;e<NCH(s);++e)try{n=n.sq$concat(parsestr(t,CHILD(s,e).value))}catch(n){throw console.error(n),new SkAst.builtin.SyntaxError("invalid string (possibly contains a unicode character)",t.c_filename,CHILD(s,e).lineno)}return n}function parsenumber(t,s,e){var n,o,r,a=s.charAt(s.length-1);if("j"===a||"J"===a)return SkAst.builtin.complex.complex_subtype_from_string(s);if("l"===a||"L"===a)return SkAst.longFromStr(s.substr(0,s.length-1),0);if(-1!==s.indexOf("."))return new SkAst.builtin.float_(parseFloat(s));if(r=s,n=!1,"-"===s.charAt(0)&&(r=s.substr(1),n=!0),"0"!==r.charAt(0)||"x"!==r.charAt(1)&&"X"!==r.charAt(1)){if(-1!==s.indexOf("e")||-1!==s.indexOf("E"))return new SkAst.builtin.float_(parseFloat(s));"0"!==r.charAt(0)||"b"!==r.charAt(1)&&"B"!==r.charAt(1)?"0"===r.charAt(0)?"0"===r?o=0:("o"!==(r=r.substring(1)).charAt(0)&&"O"!==r.charAt(0)||(r=r.substring(1)),o=parseInt(r,8)):o=parseInt(r,10):(r=r.substring(2),o=parseInt(r,2))}else r=r.substring(2),o=parseInt(r,16);return o>SkAst.builtin.int_.threshold$&&Math.floor(o)===o&&-1===s.indexOf("e")&&-1===s.indexOf("E")?SkAst.longFromStr(s,0):n?new SkAst.builtin.int_(-o):new SkAst.builtin.int_(o)}function astForSlice(t,s){var e,n,o,r,a;return REQ(s,SYM.subscript),r=null,o=null,n=null,(a=CHILD(s,0)).type===TOK.T_DOT?new SkAst.astnodes.Ellipsis:1===NCH(s)&&a.type===SYM.test?new SkAst.astnodes.Index(ast_for_expr(t,a)):(a.type===SYM.test&&(r=ast_for_expr(t,a)),a.type===TOK.T_COLON?NCH(s)>1&&(e=CHILD(s,1)).type===SYM.test&&(o=ast_for_expr(t,e)):NCH(s)>2&&(e=CHILD(s,2)).type===SYM.test&&(o=ast_for_expr(t,e)),(a=CHILD(s,NCH(s)-1)).type===SYM.sliceop&&(1===NCH(a)?(a=CHILD(a,0),n=new SkAst.astnodes.NameConstant(SkAst.builtin.none.none$,SkAst.astnodes.Load,a.lineno,a.col_offset,a.end_lineno,a.end_col_offset)):(a=CHILD(a,1)).type===SYM.test&&(n=ast_for_expr(t,a))),new SkAst.astnodes.Slice(r,o,n))}function ast_for_atom(t,s){var e=CHILD(s,0);switch(TYPE(e)){case TOK.T_NAME:var n,o=STR(e);if(o.length>=4&&o.length<=5){if("None"===o)return new SkAst.astnodes.NameConstant(SkAst.builtin.none.none$,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);if("True"===o)return new SkAst.astnodes.NameConstant(SkAst.builtin.bool.true$,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);if("False"===o)return new SkAst.astnodes.NameConstant(SkAst.builtin.bool.false$,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}return n=new_identifier(o,t),new SkAst.astnodes.Name(n,SkAst.astnodes.Load,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset);case TOK.T_STRING:var r=parsestrplus(t,s);return new SkAst.astnodes.Str(r,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset);case TOK.T_NUMBER:return new SkAst.astnodes.Num(parsenumber(t,e.value,s.lineno),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case TOK.T_ELLIPSIS:return new SkAst.astnodes.Ellipsis(LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset);case TOK.T_LPAR:return TYPE(e=CHILD(s,1))==TOK.T_RPAR?new SkAst.astnodes.Tuple([],SkAst.astnodes.Load,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):TYPE(e)==SYM.yield_expr?ast_for_expr(t,e):1==NCH(e)?ast_for_testlist(t,e):TYPE(CHILD(e,1))==SYM.comp_for?copy_location(ast_for_genexp(t,e),s):copy_location(ast_for_testlist(t,e),s);case TOK.T_LSQB:if(TYPE(e=CHILD(s,1))==TOK.T_RSQB)return new SkAst.astnodes.List([],SkAst.astnodes.Load,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset);if(REQ(e,SYM.testlist_comp),1==NCH(e)||TYPE(CHILD(e,1))==TOK.T_COMMA){var a=seq_for_testlist(t,e);return a?new SkAst.astnodes.List(a,SkAst.astnodes.Load,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset):null}return copy_location(ast_for_listcomp(t,e),s);case TOK.T_LBRACE:var i;if(TYPE(e=CHILD(s,1))==TOK.T_RBRACE)return new SkAst.astnodes.Dict(null,null,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset);var l=TYPE(CHILD(e,0))==TOK.T_DOUBLESTAR;if(1==NCH(e)||NCH(e)>1&&TYPE(CHILD(e,1))==TOK.T_COMMA)i=ast_for_setdisplay(t,e);else if(NCH(e)>1&&TYPE(CHILD(e,1))==SYM.comp_for)i=ast_for_setcomp(t,e);else if(NCH(e)>3-l&&TYPE(CHILD(e,3-l))==SYM.comp_for){if(l)return ast_error(t,s,"dict unpacking cannot be used in dict comprehension"),null;i=ast_for_dictcomp(t,e)}else i=ast_for_dictdisplay(t,e);return copy_location(i,s);default:return SkAst.assert.fail("unhandled atom "+TYPE(e)),null}}function ast_for_setdisplay(t,s){var e,n=[];for(SkAst.asserts.assert(TYPE(s)===SYM.dictorsetmaker),e=0;e<NCH(s);e+=2){var o;o=ast_for_expr(t,CHILD(s,e)),n[e/2]=o}return new SkAst.astnodes.Set(n,LINENO(s),s.col_offset,s.end_lineno,s.end_col_offset)}function astForAtom(t,s){var e,n,o,r,a=CHILD(s,0);switch(a.type){case TOK.T_NAME:var i=a.value;if(i.length>=4&&i.length<=5){if("None"===i)return new SkAst.astnodes.NameConstant(SkAst.builtin.none.none$,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);if("True"===i)return new SkAst.astnodes.NameConstant(SkAst.builtin.bool.true$,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);if("False"===i)return new SkAst.astnodes.NameConstant(SkAst.builtin.bool.false$,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}var l=new_identifier(i,t);return new SkAst.astnodes.Name(l,SkAst.astnodes.Load,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case TOK.T_STRING:return new SkAst.astnodes.Str(parsestrplus(t,s),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case TOK.T_NUMBER:return new SkAst.astnodes.Num(parsenumber(t,a.value,s.lineno),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case TOK.T_LPAR:return(a=CHILD(s,1)).type===TOK.T_RPAR?new SkAst.astnodes.Tuple([],SkAst.astnodes.Load,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):a.type===SYM.yield_expr?ast_for_expr(t,a):ast_for_testlistComp(t,a);case TOK.T_LSQB:return(a=CHILD(s,1)).type===TOK.T_RSQB?new SkAst.astnodes.List([],SkAst.astnodes.Load,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):(REQ(a,SYM.listmaker),1===NCH(a)||CHILD(a,1).type===TOK.T_COMMA?new SkAst.astnodes.List(seq_for_testlist(t,a),SkAst.astnodes.Load,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):ast_for_listcomp(t,a));case TOK.T_LBRACE:if(o=[],n=[],a=CHILD(s,1),s.type===TOK.T_RBRACE)return new SkAst.astnodes.Dict([],null,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);if(1===NCH(a)||0!==NCH(a)&&CHILD(a,1).type===TOK.T_COMMA){for(r=[],Math.floor((NCH(a)+1)/2),e=0;e<NCH(a);e+=2){var u=ast_for_expr(t,CHILD(a,e));r[e/2]=u}return new SkAst.astnodes.Set(r,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}if(0!==NCH(a)&&CHILD(a,1).type==SYM.comp_for)return ast_for_setcomp(t,a);if(NCH(a)>3&&CHILD(a,3).type===SYM.comp_for)return ast_for_dictcomp(t,a);for(Math.floor((NCH(a)+1)/4),e=0;e<NCH(a);e+=4)o[e/4]=ast_for_expr(t,CHILD(a,e)),n[e/4]=ast_for_expr(t,CHILD(a,e+2));return new SkAst.astnodes.Dict(o,n,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case TOK.T_BACKQUOTE:return new SkAst.astnodes.Repr(ast_for_testlist(t,CHILD(s,1)),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);default:SkAst.asserts.fail("unhandled atom",a.type)}}function astForAtomExpr(t,s){var e,n,o,r,a=0;if(REQ(s,SYM.atom_expr),n=NCH(s),CHILD(s,0).type===TOK.T_AWAIT&&(a=1,SkAst.asserts.assert(n>1)),!(o=ast_for_atom(t,CHILD(s,a))))return null;if(1===n)return o;if(a&&2===n)return new SkAst.astnodes.Await(o,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);for(e=a+1;e<n;e++){var i=CHILD(s,e);if(i.type!==SYM.trailer)break;if(!(r=ast_for_trailer(t,i,o)))return null;r.lineno=o.lineno,r.col_offset=o.col_offset,o=r}return a?new SkAst.astnodes.Await(o,s.line,s.col_offset,s.end_lineno,s.end_col_offset):o}function astForPower(t,s){var e,n;return REQ(s,SYM.power),n=astForAtomExpr(t,CHILD(s,0)),1===NCH(s)||CHILD(s,NCH(s)-1).type===SYM.factor&&(e=ast_for_expr(t,CHILD(s,NCH(s)-1)),n=new SkAst.astnodes.BinOp(n,SkAst.astnodes.Pow,e,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)),n}function astForStarred(t,s){return REQ(s,SYM.star_expr),new SkAst.astnodes.Starred(ast_for_expr(t,CHILD(s,1)),SkAst.astnodes.Load,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function ast_for_expr(t,s){var e,n,o,r,a;t:for(;;){switch(s.type){case SYM.test:case SYM.test_nocond:if(CHILD(s,0).type===SYM.lambdef||CHILD(s,0).type===SYM.lambdef_nocond)return astForLambdef(t,CHILD(s,0));if(NCH(s)>1)return astForIfexpr(t,s);case SYM.or_test:case SYM.and_test:if(1===NCH(s)){s=CHILD(s,0);continue t}for(a=[],r=0;r<NCH(s);r+=2)a[r/2]=ast_for_expr(t,CHILD(s,r));return"and"===CHILD(s,1).value?new SkAst.astnodes.BoolOp(SkAst.astnodes.And,a,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):(SkAst.asserts.assert("or"===CHILD(s,1).value),new SkAst.astnodes.BoolOp(SkAst.astnodes.Or,a,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset));case SYM.not_test:if(1===NCH(s)){s=CHILD(s,0);continue t}return new SkAst.astnodes.UnaryOp(SkAst.astnodes.Not,ast_for_expr(t,CHILD(s,1)),s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case SYM.comparison:if(1===NCH(s)){s=CHILD(s,0);continue t}for(o=[],n=[],r=1;r<NCH(s);r+=2)o[(r-1)/2]=astForCompOp(t,CHILD(s,r)),n[(r-1)/2]=ast_for_expr(t,CHILD(s,r+1));return new SkAst.astnodes.Compare(ast_for_expr(t,CHILD(s,0)),o,n,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case SYM.star_expr:return astForStarred(t,s);case SYM.expr:case SYM.xor_expr:case SYM.and_expr:case SYM.shift_expr:case SYM.arith_expr:case SYM.term:if(1===NCH(s)){s=CHILD(s,0);continue t}return astForBinop(t,s);case SYM.yield_expr:var i,l,u=!1;return e=null,NCH(s)>1&&(i=CHILD(s,1)),i&&(l=CHILD(i,NCH(i)-1),2==NCH(i)?(u=!0,e=ast_for_expr(t,l)):e=ast_for_testlist(t,l)),u?new SkAst.astnodes.YieldFrom(e,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset):new SkAst.astnodes.Yield(e,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case SYM.factor:if(1===NCH(s)){s=CHILD(s,0);continue t}return astForFactor(t,s);case SYM.power:return astForPower(t,s);default:SkAst.asserts.fail("unhandled expr","n.type: %d",s.type)}break}}function astForNonLocalStmt(t,s){ast_error(t,s,"Not implemented: nonlocal")}function astForAsyncStmt(t,s){ast_error(t,s,"Not implemented: async")}function astForPrintStmt(t,s){var e,n,o,r;SkAst.__future__.print_function&&ast_error(t,s,"Missing parentheses in call to 'print'");var a=1,i=null;for(REQ(s,SYM.print_stmt),NCH(s)>=2&&CHILD(s,1).type===TOK.T_RIGHTSHIFT&&(i=ast_for_expr(t,CHILD(s,2)),a=4),r=[],n=a,o=0;n<NCH(s);n+=2,++o)r[o]=ast_for_expr(t,CHILD(s,n));return e=CHILD(s,NCH(s)-1).type!==TOK.T_COMMA,new SkAst.astnodes.Print(i,r,e,s.lineno,s.col_offset,s.end_lineno,s.end_col_offset)}function astForStmt(t,s){var e;if(s.type===SYM.stmt&&(SkAst.asserts.assert(1===NCH(s)),s=CHILD(s,0)),s.type===SYM.simple_stmt&&(SkAst.asserts.assert(1===numStmts(s)),s=CHILD(s,0)),s.type===SYM.small_stmt)switch((s=CHILD(s,0)).type){case SYM.expr_stmt:return ast_for_exprStmt(t,s);case SYM.del_stmt:return astForDelStmt(t,s);case SYM.pass_stmt:return new SkAst.astnodes.Pass(s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);case SYM.flow_stmt:return ast_for_flow_stmt(t,s);case SYM.import_stmt:return astForImportStmt(t,s);case SYM.global_stmt:return astForGlobalStmt(t,s);case SYM.nonlocal_stmt:return astForNonLocalStmt(t,s);case SYM.assert_stmt:return astForAssertStmt(t,s);case SYM.print_stmt:return astForPrintStmt(t,s);case SYM.debugger_stmt:return new SkAst.astnodes.Debugger(s.lineno,s.col_offset,s.end_lineno,s.end_col_offset);default:SkAst.asserts.fail("unhandled small_stmt")}else switch(e=CHILD(s,0),REQ(s,SYM.compound_stmt),e.type){case SYM.if_stmt:return astForIfStmt(t,e);case SYM.while_stmt:return astForWhileStmt(t,e);case SYM.for_stmt:return astForForStmt(t,e);case SYM.try_stmt:return astForTryStmt(t,e);case SYM.with_stmt:return ast_for_with_stmt(t,e);case SYM.funcdef:return ast_for_funcdef(t,e,[]);case SYM.classdef:return astForClassdef(t,e,[]);case SYM.decorated:return ast_for_decorated(t,e);case SYM.async_stmt:return astForAsyncStmt(t,e);default:SkAst.asserts.assert("unhandled compound_stmt")}}operatorMap[TOK.T_VBAR]=SkAst.astnodes.BitOr,operatorMap[TOK.T_CIRCUMFLEX]=SkAst.astnodes.BitXor,operatorMap[TOK.T_AMPER]=SkAst.astnodes.BitAnd,operatorMap[TOK.T_LEFTSHIFT]=SkAst.astnodes.LShift,operatorMap[TOK.T_RIGHTSHIFT]=SkAst.astnodes.RShift,operatorMap[TOK.T_PLUS]=SkAst.astnodes.Add,operatorMap[TOK.T_MINUS]=SkAst.astnodes.Sub,operatorMap[TOK.T_STAR]=SkAst.astnodes.Mult,operatorMap[TOK.T_SLASH]=SkAst.astnodes.Div,operatorMap[TOK.T_DOUBLESLASH]=SkAst.astnodes.FloorDiv,operatorMap[TOK.T_PERCENT]=SkAst.astnodes.Mod,SkAst.setupOperators=function(t){t?operatorMap[TOK.T_AT]=SkAst.astnodes.MatMult:operatorMap[TOK.T_AT]&&delete operatorMap[TOK.T_AT]},SkAst.exportSymbol("Sk.setupOperators",SkAst.setupOperators),SkAst.astFromParse=function(t,s,e){var n,o,r,a,i=new Compiling("utf-8",s,e),l=[],u=0;switch(t.type){case SYM.file_input:for(a=0;a<NCH(t)-1;++a)if(r=CHILD(t,a),t.type!==TOK.T_NEWLINE)if(REQ(r,SYM.stmt),1===(o=numStmts(r)))l[u++]=astForStmt(i,r);else for(REQ(r=CHILD(r,0),SYM.simple_stmt),n=0;n<o;++n)l[u++]=astForStmt(i,CHILD(r,2*n));return new SkAst.astnodes.Module(l);case SYM.eval_input:SkAst.asserts.fail("todo;");case SYM.single_input:SkAst.asserts.fail("todo;");default:SkAst.asserts.fail("todo;")}},SkAst.astDump=function(t){var s=function(t){var s,e="";for(s=0;s<t;++s)e+=" ";return e};return function t(e,n){var o,r,a,i,l,u,_,f,d,S,A;if(null===e)return n+"None";if(e.prototype&&void 0!==e.prototype._astname&&e.prototype._isenum)return n+e.prototype._astname+"()";if(void 0!==e._astname){for(A=s(e._astname.length+1),S=[],d=0;d<e._fields.length;d+=2)f=e._fields[d],_=e._fields[d+1](e),u=s(f.length+1),S.push([f,t(_,n+A+u)]);for(l=[],d=0;d<S.length;++d)i=S[d],l.push(i[0]+"="+i[1].replace(/^\s+/,""));return a=l.join(",\n"+n+A),n+e._astname+"("+a+")"}if(SkAst.isArrayLike(e)){for(r=[],d=0;d<e.length;++d)o=e[d],r.push(t(o,n+" "));return n+"["+r.join(",\n").replace(/^\s+/,"")+"]"}return n+(!0===e?"True":!1===e?"False":e instanceof SkAst.builtin.lng?e.tp$str().v:e instanceof SkAst.builtin.str?e.$r().v:""+e)}(t,"")},SkAst.INHERITANCE_MAP={mod:[SkAst.astnodes.Module,SkAst.astnodes.Interactive,SkAst.astnodes.Expression,SkAst.astnodes.Suite],stmt:[SkAst.astnodes.FunctionDef,SkAst.astnodes.AsyncFunctionDef,SkAst.astnodes.ClassDef,SkAst.astnodes.Return,SkAst.astnodes.Delete,SkAst.astnodes.Assign,SkAst.astnodes.AugAssign,SkAst.astnodes.AnnAssign,SkAst.astnodes.For,SkAst.astnodes.AsyncFor,SkAst.astnodes.While,SkAst.astnodes.If,SkAst.astnodes.With,SkAst.astnodes.AsyncWith,SkAst.astnodes.Raise,SkAst.astnodes.Try,SkAst.astnodes.Assert,SkAst.astnodes.Import,SkAst.astnodes.ImportFrom,SkAst.astnodes.Global,SkAst.astnodes.Nonlocal,SkAst.astnodes.Expr,SkAst.astnodes.Pass,SkAst.astnodes.Break,SkAst.astnodes.Continue,SkAst.astnodes.Print,SkAst.astnodes.Debugger],expr:[SkAst.astnodes.BoolOp,SkAst.astnodes.BinOp,SkAst.astnodes.UnaryOp,SkAst.astnodes.Lambda,SkAst.astnodes.IfExp,SkAst.astnodes.Dict,SkAst.astnodes.Set,SkAst.astnodes.ListComp,SkAst.astnodes.SetComp,SkAst.astnodes.DictComp,SkAst.astnodes.GeneratorExp,SkAst.astnodes.Await,SkAst.astnodes.Yield,SkAst.astnodes.YieldFrom,SkAst.astnodes.Compare,SkAst.astnodes.Call,SkAst.astnodes.Num,SkAst.astnodes.Str,SkAst.astnodes.FormattedValue,SkAst.astnodes.JoinedStr,SkAst.astnodes.Bytes,SkAst.astnodes.Ellipsis,SkAst.astnodes.NameConstant,SkAst.astnodes.Constant,SkAst.astnodes.Attribute,SkAst.astnodes.Subscript,SkAst.astnodes.Starred,SkAst.astnodes.Name,SkAst.astnodes.List,SkAst.astnodes.Tuple],expr_context:[SkAst.astnodes.Load,SkAst.astnodes.Store,SkAst.astnodes.Del,SkAst.astnodes.AugLoad,SkAst.astnodes.AugStore,SkAst.astnodes.Param],slice:[SkAst.astnodes.Slice,SkAst.astnodes.ExtSlice,SkAst.astnodes.Index],boolop:[SkAst.astnodes.And,SkAst.astnodes.Or],operator:[SkAst.astnodes.Add,SkAst.astnodes.Sub,SkAst.astnodes.Mult,SkAst.astnodes.MatMult,SkAst.astnodes.Div,SkAst.astnodes.Mod,SkAst.astnodes.Pow,SkAst.astnodes.LShift,SkAst.astnodes.RShift,SkAst.astnodes.BitOr,SkAst.astnodes.BitXor,SkAst.astnodes.BitAnd,SkAst.astnodes.FloorDiv],unaryop:[SkAst.astnodes.Invert,SkAst.astnodes.Not,SkAst.astnodes.UAdd,SkAst.astnodes.USub],cmpop:[SkAst.astnodes.Eq,SkAst.astnodes.NotEq,SkAst.astnodes.Lt,SkAst.astnodes.LtE,SkAst.astnodes.Gt,SkAst.astnodes.GtE,SkAst.astnodes.Is,SkAst.astnodes.IsNot,SkAst.astnodes.In,SkAst.astnodes.NotIn],comprehension:[],excepthandler:[SkAst.astnodes.ExceptHandler],arguments_:[],arg:[],keyword:[],alias:[],withitem:[]},SkAst.exportSymbol("Sk.astFromParse",SkAst.astFromParse),SkAst.exportSymbol("Sk.astDump",SkAst.astDump),SkAst.exportSymbol("Sk.INHERITANCE_MAP",SkAst.INHERITANCE_MAP);